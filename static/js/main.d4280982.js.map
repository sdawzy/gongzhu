{"version":3,"file":"static/js/main.d4280982.js","mappings":"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","sources":["src/pages/IndexPage.tsx","src/components/cardImages.tsx","src/components/Card.tsx","src/components/specialCards.tsx","src/components/Hand.tsx","src/pages/RulesPage.tsx","src/components/Declaration.tsx","src/components/GameTable.tsx","src/pages/GameOnline.tsx","App.tsx","webpack/bootstrap","webpack/runtime/chunk loaded","webpack/runtime/compat get default export","webpack/runtime/define property getters","webpack/runtime/global","webpack/runtime/hasOwnProperty shorthand","webpack/runtime/make namespace object","webpack/runtime/publicPath","webpack/runtime/jsonp chunk loading","webpack/startup"],"sourcesContent":["// Index page\nimport React from 'react';\nimport { View, Button, StyleSheet, Text } from 'react-native';\n\nexport default function IndexPage({ navigation }) {\n  return (\n    <View style={styles.container}>\n      {/* <View style={styles.buttonContainer}>\n        <Button\n          title=\"New Offline Game\"\n          onPress={() => navigation.navigate('GamePage')}\n        />\n      </View> */}\n      <View style={styles.buttonContainer}>\n        <Button\n          title=\"New Game\"\n          onPress={() => navigation.navigate('GameOnline')}\n        />\n      </View>\n      <View style={styles.buttonContainer}>\n        <Button\n          title=\"Game Rules\"\n          onPress={() => navigation.navigate('RulesPage')}\n        />\n      </View>\n      <View style={styles.footer}>\n        <Text style={styles.footerText}><p data-key=\"footer\">© 2025 Yue Zhang. All rights reserved.</p></Text>\n      </View>\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    justifyContent: 'center',\n    alignItems: 'center',\n  },\n  buttonContainer: {\n    marginBottom: 16, \n    width: '80%', \n  },\n  footer: {\n    height: 50,\n    justifyContent: \"center\",\n    alignItems: \"center\",\n  },\n  footerText: {\n    fontSize: 16,\n    color: \"#333\",\n  },\n});\n","// Mappings from card to images\nconst cardImages = {\n    // Spades\n    'spade_2': require('../../assets/images/cards/card_spade_02.png'),  // 2♠\n    'spade_3': require('../../assets/images/cards/card_spade_03.png'),  // 3♠\n    'spade_4': require('../../assets/images/cards/card_spade_04.png'),  // 4♠\n    'spade_5': require('../../assets/images/cards/card_spade_05.png'),  // 5♠\n    'spade_6': require('../../assets/images/cards/card_spade_06.png'),  // 6♠\n    'spade_7': require('../../assets/images/cards/card_spade_07.png'),  // 7♠\n    'spade_8': require('../../assets/images/cards/card_spade_08.png'),  // 8♠\n    'spade_9': require('../../assets/images/cards/card_spade_09.png'),  // 9♠\n    'spade_10': require('../../assets/images/cards/card_spade_10.png'),  // 10♠\n    'spade_Jack': require('../../assets/images/cards/card_spade_11.png'),  // J♠\n    'spade_Queen': require('../../assets/images/cards/card_spade_12.png'),  // Q♠\n    'spade_King': require('../../assets/images/cards/card_spade_13.png'),  // K♠\n    'spade_Ace': require('../../assets/images/cards/card_spade_14.png'),  // A♠\n  \n    // Hearts\n    'heart_2': require('../../assets/images/cards/card_heart_02.png'),  // 2♥\n    'heart_3': require('../../assets/images/cards/card_heart_03.png'),  // 3♥\n    'heart_4': require('../../assets/images/cards/card_heart_04.png'),  // 4♥\n    'heart_5': require('../../assets/images/cards/card_heart_05.png'),  // 5♥\n    'heart_6': require('../../assets/images/cards/card_heart_06.png'),  // 6♥\n    'heart_7': require('../../assets/images/cards/card_heart_07.png'),  // 7♥\n    'heart_8': require('../../assets/images/cards/card_heart_08.png'),  // 8♥\n    'heart_9': require('../../assets/images/cards/card_heart_09.png'),  // 9♥\n    'heart_10': require('../../assets/images/cards/card_heart_10.png'),  // 10♥\n    'heart_Jack': require('../../assets/images/cards/card_heart_11.png'),  // J♥\n    'heart_Queen': require('../../assets/images/cards/card_heart_12.png'),  // Q♥\n    'heart_King': require('../../assets/images/cards/card_heart_13.png'),  // K♥\n    'heart_Ace': require('../../assets/images/cards/card_heart_14.png'),  // A♥\n  \n    // Diamonds\n    'diamond_2': require('../../assets/images/cards/card_diamond_02.png'),  // 2♦\n    'diamond_3': require('../../assets/images/cards/card_diamond_03.png'),  // 3♦\n    'diamond_4': require('../../assets/images/cards/card_diamond_04.png'),  // 4♦\n    'diamond_5': require('../../assets/images/cards/card_diamond_05.png'),  // 5♦\n    'diamond_6': require('../../assets/images/cards/card_diamond_06.png'),  // 6♦\n    'diamond_7': require('../../assets/images/cards/card_diamond_07.png'),  // 7♦\n    'diamond_8': require('../../assets/images/cards/card_diamond_08.png'),  // 8♦\n    'diamond_9': require('../../assets/images/cards/card_diamond_09.png'),  // 9♦\n    'diamond_10': require('../../assets/images/cards/card_diamond_10.png'),  // 10♦\n    'diamond_Jack': require('../../assets/images/cards/card_diamond_11.png'),  // J♦\n    'diamond_Queen': require('../../assets/images/cards/card_diamond_12.png'),  // Q♦\n    'diamond_King': require('../../assets/images/cards/card_diamond_13.png'),  // K♦\n    'diamond_Ace': require('../../assets/images/cards/card_diamond_14.png'),  // A♦\n  \n    // Clubs\n    'club_2': require('../../assets/images/cards/card_club_02.png'),  // 2♣\n    'club_3': require('../../assets/images/cards/card_club_03.png'),  // 3♣\n    'club_4': require('../../assets/images/cards/card_club_04.png'),  // 4♣\n    'club_5': require('../../assets/images/cards/card_club_05.png'),  // 5♣\n    'club_6': require('../../assets/images/cards/card_club_06.png'),  // 6♣\n    'club_7': require('../../assets/images/cards/card_club_07.png'),  // 7♣\n    'club_8': require('../../assets/images/cards/card_club_08.png'),  // 8♣\n    'club_9': require('../../assets/images/cards/card_club_09.png'),  // 9♣\n    'club_10': require('../../assets/images/cards/card_club_10.png'),  // 10♣\n    'club_Jack': require('../../assets/images/cards/card_club_11.png'),  // J♣\n    'club_Queen': require('../../assets/images/cards/card_club_12.png'),  // Q♣\n    'club_King': require('../../assets/images/cards/card_club_13.png'),  // K♣\n    'club_Ace': require('../../assets/images/cards/card_club_14.png'),  // A♣\n\n    // back\n    'back': require('../../assets/images/cards/card_back.png'), // card back\n  \n    default: require('../../assets/images/cards/card_back.png'), // card back (default)\n  };\n  \n  export default cardImages;\n  ","// Card component\nimport React from 'react';\nimport { View, Image, StyleSheet } from 'react-native';\nimport cardImages from './cardImages';  // Mapping of card names to images\nimport { CardInterface } from '../types';\n\nconst Card : React.FC< {\n  card: CardInterface, // Card object with id and suit properties\n  rotation?: number,  // Optional rotation angle\n  visible?: boolean, // Optional visible\n}> = ({ card, rotation, visible }) => {\n  if (rotation === undefined) { \n    rotation = 0;  // Default rotation is 0 degrees if not provided\n  }\n  if (visible === undefined) { \n    visible = true;  // Default visibility is true if not provided\n  }\n\n  const cardName = visible ? `${card.suit}_${card.rank}` : 'back';  // Construct the card name from the suit and rank properties \n  const cardImage = cardImages[cardName];  // Fetch the image from the mapping\n\n  return (\n    <View style={styles.cardContainer}>\n      <Image\n        source={cardImage}\n        style={[styles.cardImage, { transform: [{ rotate: `${rotation}deg` }] }]}\n        resizeMode=\"contain\" \n      />\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  cardContainer: {\n    margin: 0,\n  },\n  cardImage: {\n    width: 100,  \n    height: 140,\n  },\n});\n\nexport default Card;","// Special cards in Gongzhu\nimport { CardInterface } from '../types';\n\nconst PIG : CardInterface = {\n    suit: 'spade',\n    rank: 'Queen',\n    id: '49'\n}\n\nconst SHEEP: CardInterface = {\n    suit: 'diamond',\n    rank: 'Jack',\n    id: '22'\n}\n\nconst DOUBLER: CardInterface = {\n    suit: 'club',\n    rank: '10',\n    id: '8'\n}\n\nconst BLOOD: CardInterface = {\n    suit: 'heart',\n    rank: 'Ace',\n    id: '38'\n}\n\nconst BlOODS : CardInterface[] = [\n    { suit : \"heart\", rank : \"2\", id : \"heart_02\"},\n    { suit : \"heart\", rank : \"3\", id : \"heart_03\"},\n    { suit : \"heart\", rank : \"4\", id : \"heart_04\"},\n    { suit : \"heart\", rank : \"5\", id : \"heart_05\"},\n    { suit : \"heart\", rank : \"6\", id : \"heart_06\"},\n    { suit : \"heart\", rank : \"7\", id : \"heart_07\"},\n    { suit : \"heart\", rank : \"8\", id : \"heart_08\"},\n    { suit : \"heart\", rank : \"9\", id : \"heart_09\"},\n    { suit : \"heart\", rank : \"10\", id : \"heart_10\"},\n    { suit : \"heart\", rank : \"Jack\", id : \"heart_11\"},\n    { suit : \"heart\", rank : \"Queen\", id : \"heart_12\"},\n    { suit : \"heart\", rank : \"King\", id : \"heart_13\"},\n    { suit : \"heart\", rank : \"Ace\", id : \"heart_14\"},\n  ]\n\nconst SPECIAL_CARDS: CardInterface[] = [PIG, SHEEP, BLOOD, DOUBLER]\nexport { PIG, SHEEP, DOUBLER, BLOOD, BlOODS, SPECIAL_CARDS };","// Hand UI\nimport React, {useState} from 'react';\nimport { View, StyleSheet, FlatList, TouchableOpacity } from 'react-native';\nimport Card from './Card';\nimport { CardInterface } from '../types';\n\nconst Hand: React.FC< {\n    hand: CardInterface[], // List of cards in the hand\n    rotation?: number,  // Optional rotation angle\n    visible?: boolean,  // Optional visibility state\n    spacing?: number, // Optional spacing\n    selectable?: boolean, // Optional selectable\n    selectedCard?: CardInterface | null,  // Optional selected card ID\n    setSelectedCard?: Function,  // Optional callback function to update selected card state\n  }> = ({ hand, rotation, visible, spacing, selectable, selectedCard, setSelectedCard }) => {\n    if (rotation === undefined) { \n      rotation = 0;  // Default rotation is 0 degrees if not provided\n    }\n    if (visible === undefined) { \n      visible = true;  // Default visibility is true if not provided\n    }\n    if (spacing === undefined) { \n      spacing = 30;  // Default spacing is 10 pixels if not provided\n    }\n    if (selectable === undefined) { \n      selectable = true;  // Default selectable is true if not provided\n    }\n\n    const cardBack = require('../../assets/images/cards/card_back.png');\n    if (selectedCard === undefined) { \n      // console.warn('No selectedCard provided, using first card in hand');\n      [selectedCard, setSelectedCard] = useState<CardInterface | null>(null);\n    }\n    const numberOfCards = hand.length;\n    const handleCardPress = (card: CardInterface) => {\n        setSelectedCard(card);\n    };\n\n    if (visible === true && selectable) {\n      return (\n          <View style={[styles.handContainer, {width: (numberOfCards-1) * spacing + 120}]}>    \n              <FlatList horizontal={true}\n              data={hand}\n              keyExtractor={(item) => item.id}\n              renderItem={({ item, index }) => (\n                  <TouchableOpacity onPress={() => handleCardPress(item)}>\n                      <View style={[styles.cardWrapper, \n                      selectedCard == item && styles.selectedCardWrapper,\n                      {left: index * spacing,}]}>\n                          <Card \n                              card={item}\n                              visible={visible}\n                          />\n                      </View>\n                  </TouchableOpacity>\n              )}\n              contentContainerStyle={[styles.listContent, {width: (numberOfCards-1) * spacing + 100}]}\n              style={{ transform: [{ rotate: `${rotation}deg` }] }}\n              />\n          </View>\n      );\n    } else { \n      return (\n          <View style={[styles.handContainer, {width: (numberOfCards-1) * spacing + 100}]}>\n              <FlatList horizontal={true}\n              data={hand}\n              keyExtractor={(item) => item.id}\n              renderItem={({ item, index }) => (\n                  <View style={[styles.cardWrapper, \n                  {left: index * spacing,}]}>\n                      <Card \n                          card={item}\n                          visible={visible}\n                      />\n                  </View>\n              )}\n              contentContainerStyle={[styles.listContent, {width: (numberOfCards-1) * spacing + 100}]}\n              style={{ transform: [{ rotate: `${rotation}deg` }] }}\n              />\n          </View>\n      );\n    }\n}\n\nconst styles = StyleSheet.create({\n    handContainer: {\n      height: 170, // Match card height\n      position: 'relative', // Allow absolute positioning of cards\n      overflow: 'hidden', // Hide overflowing cards\n      justifyContent: 'flex-end', // Align cards to the bottom\n      width: 500,\n    },\n    title: {\n      fontSize: 20,\n      fontWeight: 'bold',\n      marginBottom: 16,\n      textAlign: 'center',\n    },\n    cardWrapper: {\n      position: 'absolute', // Allow overlapping\n      zIndex: 1, // Ensure overlapping is in order of the cards\n      transform: [{ translateY: -140 }],\n    },\n    listContent: {\n      height: '100%',\n      flexDirection: 'row',\n      alignItems: 'flex-end', // Aligns cards to the bottom of the container\n      paddingBottom: 10, // Adds spacing from the bottom\n    },\n    selectedCardWrapper: {\n        borderWidth: 5,\n        borderColor: '#FFD700', // Highlight color (gold in this case)\n        borderRadius: -5,\n        zIndex: 2, // Ensure selected card is above other cards\n        transform: [{ translateY: -160 }],\n    },\n});\n\nexport default Hand;\n","// Page for rules\nimport React from 'react';\nimport { View, Text, StyleSheet, ScrollView } from 'react-native';\nimport Card from '../components/Card'\nimport {PIG, SHEEP, BlOODS, DOUBLER, SPECIAL_CARDS} from '../components/specialCards'\nimport Hand from '../components/Hand'\nimport { CardInterface } from '../types';\n\nconst HandExample1: CardInterface[] = [\n  PIG,\n  BlOODS[2],\n  BlOODS[7]\n]\n\nconst HandExample2: CardInterface[] = [\n  SHEEP,\n  BlOODS[12],\n  BlOODS[8],\n  DOUBLER\n]\n\nconst HandExample3: CardInterface[] = [...BlOODS, PIG]\nconst RulesPage: React.FC = () => {\n  return (\n    <ScrollView style={styles.container} contentContainerStyle={styles.contentContainer}>\n      <Text style={styles.title}>Rules of Gongzhu</Text>\n      <Text style={styles.title}>By Yue Zhang</Text>\n      <Text style={styles.text}>\n        Gongzhu (lit. \"Pushing the Pig\") is a traditional Chinese card game. It is usually played by 4 players with the standard deck of 52 playing cards. \n         The goal of Gongzhu is to score the highest points by<Text style={styles.highlight}> avoiding penalty cards</Text>  and <Text style={styles.highlight}>collecting beneficial ones</Text>.\n      </Text>\n\n      <Text style={styles.sectionTitle}>Gameplay</Text>\n      <Text style={styles.text}>\n        1. The game is played with 4 players and a standard deck of 52 cards.\n      </Text>\n      <Text style={styles.text}>\n        2. Cards are dealt equally to all players, with each player receiving 13 cards.\n      </Text>\n      <Text style={styles.text}>\n        3. Players take turns playing one card each. The first card determines the suit for that round.\n      </Text>\n      <Text style={styles.text}>\n        4. <Text style={styles.highlight}>Players must follow suit if possible</Text>. If a player cannot follow suit, they may play any card.\n      </Text>\n      <Text style={styles.text}>\n        5. The highest card of the lead suit wins the round, and the winner collects all cards played. Note that Ace is the largest and 2 is the smallest in any suit. \n      </Text>\n\n      <Text style={styles.sectionTitle}>Card Values</Text>\n      <Text style={styles.text}>The following cards have special values:</Text>\n      <Text style={styles.bulletedList}>- Queen of Spade (♠): <Text style={styles.highlight}>Known as the Pig.</Text> Its value is <Text style={styles.highlight}>-100</Text> points. Try your best to avoid collecting the Pig!</Text>\n      <Card card={PIG}/>\n      <Text style={styles.bulletedList}>- Jack of Diamond (♦): <Text style={styles.highlight}>Known as the Sheep.</Text> Its value is <Text style={styles.highlight}>+100</Text> points. Try your best to catch the Sheep!</Text>\n      <Card card={SHEEP}/>\n      <Text style={styles.bulletedList}>- Hearts (♥): <Text style={styles.highlight}>Known as the Bloods.</Text> Most of heart cards have negative points. </Text>\n      <Hand hand={BlOODS} spacing={100} selectable={false}/>\n      <Text style={styles.bulletedList}>  - 2, 3 and 4 of Heart have no values. </Text>\n      <Hand hand={BlOODS.slice(0,3)} spacing={100} selectable={false}/>\n      <Text style={styles.bulletedList}>  - 5 to 10 of Heart are <Text style={styles.highlight}>-10</Text> points each. </Text>\n      <Hand hand={BlOODS.slice(3,9)} spacing={100} selectable={false}/>\n      <Text style={styles.bulletedList}>  - Jack, Queen, King and Ace of Heart worth <Text style={styles.highlight}>-20, -30, -40 and -50</Text> points, respectively. </Text>\n      <Hand hand={BlOODS.slice(9,13)} spacing={100} selectable={false}/>\n      <Text style={styles.bulletedList}>- Ten of Club (♣): <Text style={styles.highlight}>Known as the Doubler.</Text> Your score will double if you collect the Doubler, no matter it is positive or negative.</Text>\n      <Card card={DOUBLER}/>\n      <Text style={styles.bulletedList}>- All the other cards do not have any values.</Text>\n\n\n      <Text style={styles.sectionTitle}>Score Calculation</Text>\n      <Text style={styles.text}>\n        After each game, the score of each player is determined by their collected cards that have values. It is simply <Text style={styles.highlight}>the sum of the values</Text> of each card. If they have the Doubler (10 of Club), the score would double.\n      </Text>\n      <Text style={styles.sectionSubTitle}>Special Situations</Text>\n      <Text style={styles.bulletedList}>- If a player collects <Text style={styles.highlight}>only the Doubler</Text>, without the Pig, the Sheep, nor any Blood, the Doubler will worth +50 points.</Text>\n      <Text style={styles.bulletedList}>- If a player collects <Text style={styles.highlight}>all the hearts</Text> including 2, 3 and 4, the values of the hearts will become positive. (+200 points in total) </Text>\n      <Text style={styles.bulletedList}>- If a player collects <Text style={styles.highlight}>the Pig, the Sheep, the Doubler and all the hearts</Text> including 2, 3 and 4, the values of the pig will become positive. (+100 points) </Text>\n      <Text style={styles.sectionSubTitle}> Example 1</Text>\n      <Text style={styles.bulletedList}>The score of the following player is -100-0-10=-110. </Text>\n      <Hand hand={HandExample1} spacing={100} selectable={false}/>\n      <Text style={styles.sectionSubTitle}> Example 2</Text>\n      <Text style={styles.bulletedList}>The score of the following player is (+100-50-10)*2=+80. </Text>\n      <Hand hand={HandExample2} spacing={100} selectable={false}/>\n      <Text style={styles.sectionSubTitle}> Example 3</Text>\n      <Text style={styles.bulletedList}>The score of the following player is +200-100=+100. </Text>\n      <Hand hand={HandExample3} spacing={100} selectable={false}/>\n\n\n\n      <Text style={styles.sectionTitle}>Winning and Losing</Text>\n      <Text style={styles.text}>\n        You and the player directly opposite you are teammates. Your team's score is the <Text style={styles.highlight}>combined total</Text> of both players' individual scores.\n      </Text>\n      <Text style={styles.text}>\n        The game is typically played across multiple rounds, with scores for both teams accumulating over time. The game continues until one team's score reaches or exceeds +1000 points, or falls to or below -1000 points.\n      </Text>\n      <Text style={styles.text}>\n      <Text style={styles.highlight}>A team wins by reaching or exceeding +1000 points. Conversely, a team loses if their score falls to or below -1000 points.</Text>\n      </Text>\n\n      <Text style={styles.sectionTitle}>Declaration Mode</Text>\n      <Text style={styles.text}>\n       To make the game more exciting, you can <Text style={styles.highlight}>enable card declarations</Text> in the beginning of the game!\n       Now there is an extra <Text style={styles.highlight}>declaration phase</Text> before the first round of game. During the declaration phase, \n       each player takes turns to decide whether to <Text style={styles.highlight}>declare special card(s)</Text> in their hand.\n      </Text>\n      <Text style={styles.text}>\n       The special cards are <Text style={styles.highlight}>the Pig, the Sheep, the Big Blood (Ace of Heart) and the Doubler.</Text>\n      </Text>  \n      <Hand hand={SPECIAL_CARDS} spacing={100} selectable={false}/>\n      <Text style={styles.text}>\n       If a player decides to declare one of those special cards, they can either declare it <Text style={styles.highlight}>secretly (closedly)</Text> or <Text style={styles.highlight}>openly</Text>. \n      </Text>\n      <Text style={styles.bulletedList}> - A <Text style={styles.highlight}>secretly delcared</Text> card has <Text style={styles.highlight}>doubled (times 2)</Text> effect. \n      That is to say, a secretly declared Pig is -200 instead of -100, a secretly declared Sheep is +200 instead of +100, a secretly declared Doubler quadruple one's score, and \n      a secretly declared Big Blood causes all Bloods' scores to double. \n      When one secretly declares a card, they does not need to show that card until that card is played. </Text>\n      <Text style={styles.bulletedList}> - A <Text style={styles.highlight}>openly delcared</Text> card has <Text style={styles.highlight}>quadrupled (times 4)</Text> effect!  \n      When one secretly declares a card, they must always show that declared card. </Text>\n      <Text style={styles.text}>\n       Note that in order to prevent openly declared cards from being too overpowered,\n       <Text style={styles.highlight}>it is not allowed to play an openly card in the first round of the suit of that card (unless that card is the only one in that suit).</Text> \n       For example, one cannot play an openly declared Pig in the first round of spade, or an openly declared Doubler in the first round of Heart.\n      </Text>      \n      \n      <Text style={styles.sectionTitle}>Have fun playing Gongzhu!</Text>\n      <View style={styles.footer}>\n        <Text style={styles.footerText}><p data-key=\"footer\">© 2025 Yue Zhang. All rights reserved.</p></Text>\n      </View>\n    </ScrollView>\n  );\n};\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: '#f8f9fa',\n  },\n  contentContainer: {\n    padding: 20,\n  },\n  title: {\n    fontSize: 24,\n    fontWeight: 'bold',\n    textAlign: 'center',\n    marginBottom: 20,\n    color: '#343a40',\n  },\n  sectionTitle: {\n    fontSize: 20,\n    fontWeight: 'bold',\n    marginTop: 20,\n    marginBottom: 10,\n    color: '#495057',\n  },\n  sectionSubTitle: {\n    fontSize: 18,\n    fontWeight: 'bold',\n    marginTop: 20,\n    marginBottom: 10,\n    color: '#222222',\n  },\n  text: {\n    fontSize: 16,\n    lineHeight: 24,\n    color: '#212529',\n    marginBottom: 10,\n  },\n  bulletedList: {\n    fontSize: 16,\n    lineHeight: 24,\n    color: '#212529',\n    marginLeft: 20,\n  },\n  highlight: {\n    backgroundColor: '#FFFF99', \n    color: '#000', \n    fontWeight: 'bold',\n    paddingHorizontal: 2,\n    borderRadius: 4,\n  },\n  strongHighlight: {\n    backgroundColor: '#FF9999', \n    color: '#fff', \n    paddingHorizontal: 4,\n    borderRadius: 4,\n    fontWeight: 'bold',\n  },\n  footer: {\n    height: 50,\n    justifyContent: \"center\",\n    alignItems: \"center\",\n  },\n  footerText: {\n    fontSize: 16,\n    color: \"#333\",\n  },\n});\n\nexport default RulesPage;","// Declaration UI used in GameTable\nimport React from 'react';\nimport { View, Text, TouchableOpacity } from 'react-native';\nimport { CardInterface, DeclarationsInterface } from '../types';\nimport Card from './Card';\nimport { PIG, SHEEP, BLOOD, DOUBLER} from './specialCards';\n\nconst OneDeclaration : React.FC<{\n    specialCard: CardInterface,\n    specialCardName: string,\n    declarations: DeclarationsInterface,\n    setDeclarations: Function,\n}>= ({specialCard, specialCardName, declarations, setDeclarations}) => {\n    // console.log(declarations)\n    return (<View>\n        <Card card={specialCard}/>\n        <View style={{ marginTop: 2, justifyContent: \"space-between\" }}>\n          {[\"open\", \"close\", \"no\"].map((option) => (\n            <TouchableOpacity\n              key={option}\n              onPress={() => setDeclarations(prevDecs => ({\n                ...prevDecs,  \n                [specialCardName]: option // Update only the specific key\n            }))}\n              style={{\n                flexDirection: \"row\",\n                alignItems: \"center\",\n                padding: 5,\n                backgroundColor: declarations[specialCardName] === option ? \"#007AFF\" : \"#BBB\",\n                borderRadius: 3,\n                marginVertical: 3,\n              }}\n            >\n              <Text style={{ color: declarations[specialCardName] === option ? \"white\" : \"black\" }}>\n                {option + \" declare\"}\n              </Text>\n            </TouchableOpacity>\n          ))}\n          </View>\n    </View>);\n};\n\nconst Declaration : React.FC<{\n    hand: CardInterface[],\n    declarations: DeclarationsInterface,\n    setDeclarations: Function,\n}>= ({hand, declarations, setDeclarations}) => {\n    // console.log(hand)\n    let has_pig = false;\n    let has_sheep = false;\n    let has_blood = false;\n    let has_doubler = false;\n    \n    for (const card of hand) {\n        if (card.suit === PIG.suit && card.rank === PIG.rank) {\n            has_pig = true;\n        }\n        if (card.suit === SHEEP.suit && card.rank === SHEEP.rank) {\n            has_sheep = true;\n        }\n        if (card.suit === BLOOD.suit && card.rank === BLOOD.rank) {  \n            has_blood = true;\n        }\n        if (card.suit === DOUBLER.suit && card.rank === DOUBLER.rank) {  \n            has_doubler = true;\n        }\n    }\n\n    if (!has_pig && !has_sheep && !has_blood && !has_doubler) {\n        return (\n            <View>\n                <Text>No Special Card to Declare!</Text>\n            </View>\n        )\n    }\n\n    return (<View style={{ flexDirection: 'row', alignItems: 'center' }}>\n        {[\n            { condition: has_pig, card: PIG, name: \"pig\" },\n            { condition: has_sheep, card: SHEEP, name: \"sheep\" },\n            { condition: has_blood, card: BLOOD, name: \"blood\" },\n            { condition: has_doubler, card: DOUBLER, name: \"doubler\" }\n        ].map(({ condition, card, name }) => \n            condition && (\n                <OneDeclaration \n                    key={name} \n                    specialCard={card} \n                    specialCardName={name} \n                    declarations={declarations} \n                    setDeclarations={setDeclarations} \n                />\n            )\n        )}\n    </View>\n    );\n};\n\nexport default Declaration;\n","// Game table component\nimport React, { useState, useEffect} from 'react';\nimport { View, Text, Button, StyleSheet, Image, Modal, FlatList, TouchableOpacity  } from 'react-native';\nimport Card from '../components/Card';\nimport {PIG, SHEEP, BLOOD, DOUBLER} from '../components/specialCards';\nimport Hand from '../components/Hand';\nimport Declaration from './Declaration';\nimport { CardInterface, PlayerInterface, DeclarationsInterface } from '../types';\nimport axios from 'axios';\n\ninterface GameTableProps {\n  initialPlayers: PlayerInterface[]; \n  online: boolean; \n  ai: String; \n  gameMode: String; \n  enable_declarations: boolean; \n};\n\nconst defaultAvatars = [\n    require('../../assets/images/avatars/You.png'),\n    require('../../assets/images/avatars/Panda.png'),\n    require('../../assets/images/avatars/Penguin.png'),\n    require('../../assets/images/avatars/Elephant.png')\n];\n\nconst GameTable: React.FC<GameTableProps> = ({ initialPlayers, online, ai = \"normal\", gameMode, enable_declarations }) => {\n    const maxRounds = 13;\n    const bottonTitle = \"Show Cards & Declaration\";\n\n    const [players, setPlayers] = useState<PlayerInterface[]>(online ? [] : initialPlayers);  \n    const [selectedPlayer, setSelectedPlayer] = useState<PlayerInterface | null>(null);\n    const [selectedCard, setSelectedCard] = useState<CardInterface | null>(null);\n    const [firstPlayerIndices, setFirstPlayerIndices] = useState<number[]>([]);\n    const [history, setHistory] = useState<CardInterface[]>([]);\n    const [firstPlayerIndex, setFirstPlayerIndex] = useState(0);\n    const [readyToLog, setReadyToLog] = useState<boolean>(false);\n    const [currentPlayerIndex, setCurrentPlayerIndex] = useState(0);\n    const [roundCount, setRoundCount] = useState(0);\n    const [gameId, setGameId] = useState<String | null> (null); \n    const [cardsPlayedThisRound, setCardsPlayedThisRound] = useState<CardInterface[]>([]);\n    const [logs, setLogs] = useState<string[]>([]);\n    const [isLogExpanded, setIsLogExpanded] = useState<boolean>(false);\n    const [loading, setLoading] = useState<boolean>(online ? true : false);\n    const [started, setStarted] = useState<boolean>(false);\n    const [error, setError] = useState<String | null>(null);\n    const [isDeclarationPhase, setDeclarationPhase] = useState<boolean>(false);\n    const [declarations, setDeclarations] = useState<DeclarationsInterface> ({\n        \"pig\" : 'no',\n        'sheep': 'no',\n        \"doubler\": 'no',\n        \"blood\": 'no'\n    });\n    const [actionValue, setActionValue] = useState<number | null>(null);\n    // If deployed, use the api from the environment variable\n    // const API_URL = Constants.expoConfig?.extra?.apiUrl;\n    // const API_URL = \"http://0.0.0.0:8000\";\n    const API_URL = \"https://gongzhuapi.onrender.com\";\n    const addLog = (message: string) => {\n        setLogs(prevLogs => [message, ...prevLogs]);\n    }\n\n    const toggleLog = () => {\n        setIsLogExpanded(!isLogExpanded);\n    };\n\n    // console.log(API_URL);\n    const handleNextTurn = () => {\n        // If the game mode is set to be full, then display each turn\n        if (gameMode == \"full\") {\n            if (isEndOneRound) {\n                endOneRound();\n                return;\n            } else if (isEndEpisode) {\n                endEpisode();\n            } else if (isYourTurn) {\n                if (isDeclarationPhase) {\n                    handleDeclarations();\n                } else {\n                    handlePlaySelectedCard();\n                }\n            } else {\n                handleNextPlayer();\n            }\n        } else { // If not, only display the state when the player needs to take actions\n            if (isEndEpisode) {\n                endEpisode();\n            } else {\n                handleStep();\n            }\n        }\n    }\n\n    // Fetch the log based on history and first players\n    const fetchLogs = async () => {\n        setLogs([]);\n        // If there is a declaration phase\n        if (enable_declarations) {\n            addLog('---Declaration phase---');\n            for (let i = 0; i < 4; i++) {\n                const player = players[(i + firstPlayerIndices[0]) % 4];\n                addDeclarationsLog(player.name,\n                {\n                    \"closed_declarations\" : player.closedDeclaredCards,\n                    \"open_declarations\" : player.openDeclaredCards,\n                });\n            }\n            if (!isDeclarationPhase) {\n                addLog('---End Declaration phase---');\n            }\n        }\n        // \n        for (let r = 0; r < roundCount; r++) {\n            addLog(`---Round ${r+1}---`);\n            for (let i = 0; i < 4; i++) {\n                const player = players[(i + firstPlayerIndices[r]) % 4];\n                const move = history[r * 4 + i];\n                addLog(`Round ${r+1}: ` + `${player.name} played ${move.rank} of ${move.suit}.`);\n            }\n            const largest_player = players[firstPlayerIndices[r+1]];\n            addLog(`${largest_player.name} was the largest.`);\n            addLog(`---End Round ${r+1}---`);\n        }\n        //\n        if (!isDeclarationPhase)  {\n            addLog(`---Round ${roundCount+1}---`);\n        }\n        for (let i = 0; i < cardsPlayedThisRound.length; i++) {\n            const player = players[(i + firstPlayerIndices[roundCount]) % 4];\n            const move = history[roundCount * 4 + i];\n            addLog(`Round ${roundCount+1}: ` + `${player.name} played ${move.rank} of ${move.suit}.`);            \n        }\n        // console.log('History: ', history);\n    }\n\n    // Convert declarations to api request format\n    const convertToDeclarationRequest = () => {\n        let closedDeclaredCards: CardInterface[] = [];\n        let openDeclaredCards: CardInterface[] = [];\n        if (declarations['pig'] != 'no') {\n            if (declarations['pig'] == 'open') {\n                openDeclaredCards.push(PIG);\n            } else {\n                closedDeclaredCards.push(PIG);\n            }\n        }\n        if (declarations['sheep'] != 'no') {\n            if (declarations['sheep'] == 'open') {\n                openDeclaredCards.push(SHEEP);\n            } else {\n                closedDeclaredCards.push(SHEEP);\n            }\n        }\n        if (declarations['blood'] != 'no') {\n            if (declarations['blood'] == 'open') {\n                openDeclaredCards.push(BLOOD);\n            } else {\n                closedDeclaredCards.push(BLOOD);\n            }\n        }\n        if (declarations['doubler'] != 'no') {\n            if (declarations['doubler'] == 'open') {\n                openDeclaredCards.push(DOUBLER);\n            } else {\n                closedDeclaredCards.push(DOUBLER);\n            }\n        }\n        return {\n            'id' : gameId,\n            'closed_declarations' : closedDeclaredCards,\n            'open_declarations' : openDeclaredCards\n        }\n    }\n\n    const handleStep = () => {\n        // Logic to play the selected card. You can implement this as per the game rules.\n        if (isDeclarationPhase) {\n            const requestData = convertToDeclarationRequest(); // request\n            // console.log(requestData);\n            axios.post(API_URL + '/step', requestData).then((response) => {\n                // const data = response.data;\n                const statusCode = response.status;\n                // addDeclarationsLog(\"You\", requestData)\n                if (statusCode === 400) {\n                    addLog(\"Invalid declaration by you. Please try again.\");\n                    return;\n                }\n                // addLog(`Round ${roundCount+1}: ` + `you played ${currentPlayedCard.rank} of ${currentPlayedCard.suit}.`);\n                fetchGameStates(gameId);\n                // setCurrentPlayerIndex((currentPlayerIndex + 1) % players.length);\n            }).catch((error) => {\n                if (error.status === 400 ) {\n                    // addLog(\"Invalid move by you. Please try again.\");\n                    return;\n                }\n                console.error('Error fetching playing card: ', error);\n            });\n        }\n        if (selectedCard === null) {\n            console.warn('No card selected to play');\n            return;\n        }\n        const currentPlayedCard = selectedCard;\n        setSelectedCard(null);\n\n        if (online) {\n            const requestData = {\n                'id' : gameId,\n                'suit' : currentPlayedCard.suit,\n                'rank' : currentPlayedCard.rank,\n            }\n            axios.post(API_URL + '/step', requestData).then((response) => {\n                // const data = response.data;\n                const statusCode = response.status;\n                if (statusCode === 400) {\n                    addLog(\"Invalid move by you. Please try again.\");\n                    return;\n                }\n                // addLog(`Round ${roundCount+1}: ` + `you played ${currentPlayedCard.rank} of ${currentPlayedCard.suit}.`);\n                fetchGameStates(gameId);\n                // setCurrentPlayerIndex((currentPlayerIndex + 1) % players.length);\n            }).catch((error) => {\n                if (error.status === 400 ) {\n                    addLog(\"Invalid move by you. Please try again.\");\n                    return;\n                }\n                console.error('Error fetching playing card: ', error);\n            });\n        } else if ( playACard(players[0], currentPlayedCard) ) {\n            setCurrentPlayerIndex((currentPlayerIndex + 1) % players.length);\n        }\n    }\n    \n    const handleShowCollectedCards = (player: PlayerInterface) => {\n        setSelectedPlayer(player);\n    };\n\n    const handleCloseModal = () => {\n        setSelectedPlayer(null);\n    };\n\n    const isValidMove = (card: CardInterface) : boolean   => {  \n        // Deprecated method\n        // Now use api to determine whether a move is valid\n        return true; \n    };\n\n    const playACard = (player: PlayerInterface, card?: CardInterface) : boolean =>  {\n        // Logic to play a card from the player's hand.\n        const index = card === undefined ? 0 : player.hand.findIndex((item) => item.id === card.id);\n        card = player.hand[index];\n        // check if this card is valid\n        if (isValidMove(card)) {\n            player.currentPlayedCard = card;\n            player.playedCards.push(card);\n            player.hand.splice(index, 1);\n            setCardsPlayedThisRound(prevCards => [card, ...prevCards]);\n            // addLog(`Round ${roundCount+1}: ` + `${player.name} played ${card.rank} of ${card.suit}.`);\n            return true;\n        } else {\n            addLog(`Round ${roundCount+1}: Invalid move by ${player.name}.`);\n            return false;\n        }\n    }\n    \n    // Add declarations to logs\n    const addDeclarationsLog = (name: string | undefined, declarations) => {\n        for(const card of declarations[\"open_declarations\"]) {\n            if (card.id == PIG.id) {\n                addLog(`${name} openly declared Pig!`);\n            }\n            if (card.id == SHEEP.id) {\n                addLog(`${name} openly declared Sheep!`);\n            }\n            if (card.id == BLOOD.id) {\n                addLog(`${name} openly declared Blood!`);\n            }\n            if (card.id == DOUBLER.id) {\n                addLog(`${name} openly declared Doubler!`);\n            }\n        }\n        if (name == 'You') {\n            for(const card of declarations[\"closed_declarations\"]) {\n                if (card.id == PIG.id) {\n                    addLog(`${name} secretly declared Pig!`);\n                }\n                if (card.id == SHEEP.id) {\n                    addLog(`${name} secretly declared Sheep!`);\n                }\n                if (card.id == BLOOD.id) {\n                    addLog(`${name} secretly declared Blood!`);\n                }\n                if (card.id == DOUBLER.id) {\n                    addLog(`${name} secretly declared Doubler!`);\n                }\n            }\n        } else {\n            if (declarations[\"closed_declarations\"].length > 0) {\n                addLog(`${name} secretly declared ${declarations[\"closed_declarations\"].length} card(s)!`);\n            }\n        }\n    }\n\n    const handleNextPlayer = () => {\n        // Logic to move to the next player, for example, using a round-robin approach.\n        if (online) {\n            axios.post(API_URL + '/next_player', {'id' : gameId}).then((response) => {\n                const data = response.data;\n                const move = data.move;\n                // if (isDeclarationPhase) {\n                //     // addDeclarationsLog(players[currentPlayerIndex].name, move)\n                // } else {\n                //     // addLog(`Round ${roundCount+1}: ` + `${players[currentPlayerIndex].name} played ${move.rank} of ${move.suit}.`);\n                // }\n                fetchGameStates(gameId);\n                // setCurrentPlayerIndex((currentPlayerIndex + 1) % players.length);\n            }).catch((error) => {\n                console.error('Error fetching next player: ', error);\n            });\n        } else if (playACard(players[currentPlayerIndex])) {\n            setCurrentPlayerIndex((currentPlayerIndex + 1) % players.length);\n        }\n    };\n\n    // Play selected card\n    const handlePlaySelectedCard = () => {\n        // Logic to play the selected card. You can implement this as per the game rules.\n        if (selectedCard === null) {\n            console.warn('No card selected to play');\n            return;\n        }\n        const currentPlayedCard = selectedCard;\n        setSelectedCard(null);\n\n        if ( online) {\n            const requestData = {\n                'id' : gameId,\n                'suit' : currentPlayedCard.suit,\n                'rank' : currentPlayedCard.rank,\n            }\n            axios.post(API_URL + '/play_card', requestData).then((response) => {\n                // const data = response.data;\n                const statusCode = response.status;\n                if (statusCode === 400) {\n                    addLog(\"Invalid move by you. Please try again.\");\n                    return;\n                }\n                // addLog(`Round ${roundCount+1}: ` + `you played ${currentPlayedCard.rank} of ${currentPlayedCard.suit}.`);\n                fetchGameStates(gameId);\n                // setCurrentPlayerIndex((currentPlayerIndex + 1) % players.length);\n            }).catch((error) => {\n                if (error.status === 400 ) {\n                    addLog(\"Invalid move by you. Please try again.\");\n                    return;\n                }\n                console.error('Error fetching playing card: ', error);\n            });\n        } else if ( playACard(players[0], currentPlayedCard) ) {\n            setCurrentPlayerIndex((currentPlayerIndex + 1) % players.length);\n        }\n    };\n\n    const endOneRound = async () => {\n        try {\n            // Figure out the largest of this round based on the played cards\n            let largestIndex;\n            if (online) {\n                const response = await axios.post(API_URL + '/next_round', { 'id': gameId });\n                const data = response.data;\n                largestIndex = data.largestIndex;\n    \n                // addLog(`Round ${roundCount + 1}: ` + `${players[largestIndex].name} was largest.`);\n                await fetchGameStates(gameId); // Ensure the game state is fetched before proceeding\n            } else {\n                largestIndex = Math.floor(Math.random() * 4); // Randomly choose the largest player offline\n                // Update the round count\n                setRoundCount((prevCount) => prevCount + 1);\n            }\n\n            // Process collected cards for the largest player\n            for (let i = 0; i < players.length; i++) {\n                players[largestIndex].collectedCards.push(players[i].currentPlayedCard);\n                players[i].currentPlayedCard = null;\n            }\n    \n            // Decide the next step based on the round count\n            if (roundCount < maxRounds) { // Use `roundCount + 1` because `setRoundCount` is asynchronous\n                setCardsPlayedThisRound([]);\n                setFirstPlayerIndex(largestIndex);\n                setCurrentPlayerIndex(largestIndex);\n                // console.log(`Round ${roundCount + 1} ended.`);\n            } else {\n                setFirstPlayerIndex(-1);\n                setCurrentPlayerIndex(-1);\n            }\n        } catch (error) {\n            console.error('Error in endOneRound: ', error);\n        }\n    };\n    \n    const handleDeclarations = () => {\n        const requestData = convertToDeclarationRequest(); // request\n        // console.log(requestData);\n        axios.post(API_URL + '/make_declarations', requestData).then((response) => {\n            // const data = response.data;\n            const statusCode = response.status;\n            addDeclarationsLog(\"You\", requestData)\n            if (statusCode === 400) {\n                addLog(\"Invalid declaration by you. Please try again.\");\n                return;\n            }\n            // addLog(`Round ${roundCount+1}: ` + `you played ${currentPlayedCard.rank} of ${currentPlayedCard.suit}.`);\n            fetchGameStates(gameId);\n            // setCurrentPlayerIndex((currentPlayerIndex + 1) % players.length);\n        }).catch((error) => {\n            if (error.status === 400 ) {\n                addLog(\"Invalid move by you. Please try again.\");\n                return;\n            }\n            console.error('Error fetching playing card: ', error);\n        });\n    }\n    \n    const startGame = () => {\n        axios.post(API_URL + '/start_game', {\"ai\": ai, \"auto\": gameMode != 'full', \"declaration\": enable_declarations})\n            .then(response => {\n                // console.log(response.data);\n                fetchGameStates(response.data.id);\n                setDeclarations({\n                    \"pig\" : 'no',\n                    'sheep': 'no',\n                    \"doubler\": 'no',\n                    \"blood\": 'no'\n                })\n            })\n            .catch(error => {\n                console.error(\"There was an error starting the game!\", error);\n            });\n    }\n\n    const endEpisode = () => {\n        // console.log('Episode ended. New Game started.');\n        startGame();\n    }\n\n    const fetchGameStates = async (id: String | null) => {\n        // if (loading) {\n        //     return; // Return early if already loading\n        // }\n        try {\n            setLoading(true); // Start loading\n            const response = await axios.post(API_URL + '/get_game_state', {'id' : id});\n            const game_state = response.data.game_state;\n            setPlayers(game_state.players); // Update state with player data\n            setFirstPlayerIndex(game_state.firstPlayerIndex); // Update state with the index of the first player\n            setRoundCount(game_state.roundCount); // Update state with the current round count\n            setCurrentPlayerIndex(game_state.currentPlayerIndex); // Update state with the index of the current player\n            setCardsPlayedThisRound(game_state.cardsPlayedThisRound); // Update state with the cards played this round\n            setDeclarationPhase(game_state.isDeclarationPhase); // Set the declaration\n            setGameId(id);\n            setFirstPlayerIndices(game_state.firstPlayerIndices);\n            // setHistory(game_state.history);\n            setHistory([...game_state.history]); \n            setReadyToLog(true);\n        } catch (err) {\n            console.error(\"Failed to fetch game states:\", err);\n            setError(\"Failed to load player data.\");\n        } finally {\n            setLoading(false); \n            setStarted(true); // Game started\n            // fetchLogs();\n        }\n    };\n\n    if (online) {\n        useEffect(() => {\n            startGame();\n        }, []); \n    }\n\n    let isEndOneRound = false; \n    // Check if every player has played some card\n    if (players.length > 0) {\n        isEndOneRound = players[0].currentPlayedCard != null &&\n        players[1].currentPlayedCard != null &&\n        players[2].currentPlayedCard != null &&\n        players[3].currentPlayedCard != null;\n    } \n    // const isEndOneRound = false;\n    const isEndEpisode = (roundCount === maxRounds && !isEndOneRound);\n    const isYourTurn = (currentPlayerIndex === 0); // Assuming player 0 is at the bottom\n    if (isEndOneRound && currentPlayerIndex != -1) {\n        setCurrentPlayerIndex(-1);\n        // console.log('End of one round');\n    }\n\n    // const isFetching = useRef(false);\n\n    useEffect(() => {\n        if (readyToLog) {\n            fetchLogs();\n            setReadyToLog(false);\n        }\n    }, [readyToLog]); \n\n    // Update esimated action value\n    useEffect(() => {\n        if (selectedCard == null) {\n            setActionValue(null)\n        } else {\n            // Request estimated action value\n            const requestData = {\n                'id' : gameId,\n                'suit' : selectedCard.suit,\n                'rank' : selectedCard.rank,\n            }\n            axios.post(API_URL + '/evaluate', requestData).then((response) => {\n                const statusCode = response.status;\n                if (statusCode === 400) {\n                    // addLog(\"Invalid move by you. Please try again.\");\n                    return;\n                }\n                const data = response.data;\n                const evaluation = data.evaluation;\n                setActionValue(evaluation);\n                // addLog(`Round ${roundCount+1}: ` + `you played ${currentPlayedCard.rank} of ${currentPlayedCard.suit}.`);\n                // fetchGameStates(gameId);\n                // setCurrentPlayerIndex((currentPlayerIndex + 1) % players.length);\n            }).catch((error) => {\n                // if (error.status === 400 ) {\n                //     addLog(\"Invalid move by you. Please try again.\");\n                //     return;\n                // }\n                // console.error('Error fetching playing card: ', error);\n            });            \n        }\n    }, [selectedCard]);\n    \n\n    // Add hotkey for the center button\n    useEffect(() => {\n        const handleKeyPress = (event: KeyboardEvent) => {\n            if (event.key.toLowerCase() === 'n') {\n                handleNextTurn(); // Trigger the button action when 'N' is pressed\n            }\n        };\n\n        window.addEventListener('keydown', handleKeyPress);\n        return () => {\n            window.removeEventListener('keydown', handleKeyPress);\n        };\n    }, [players, selectedCard, currentPlayerIndex]);\n\n    if (!started) {\n        return (\n            <Text>Loading Game...</Text>\n        );\n    }\n    return (\n    <View style={styles.tableContainer}>\n        {/* Top Player */}\n        <View style={[styles.playerContainer, styles.topPlayer]}>\n            <Hand hand={players[2].hand} rotation={0} visible={false} />\n            <View style={[styles.avatarNameContainer, \n            currentPlayerIndex===2 && styles.currentPlayerWrapper, { transform: [{ rotate: '180deg' }, \n                ] }]}>\n            <Image source={players[2].avatar ? players[2].avatar : defaultAvatars[2]} style={styles.avatar} />\n            <Text style={styles.playerName}>{players[2].name}</Text>\n            <Text style={styles.playerName}>Score : {players[2].score}</Text>\n            <Button\n                title={bottonTitle}\n                onPress={() => handleShowCollectedCards(players[2])}\n            />\n            </View>\n        </View>\n        {/* Played card of Top Player */}\n        <View style={[styles.playedCardContainer, { top: 180 }]}>\n            {players[2].currentPlayedCard != null && (\n            <Card card={players[2].currentPlayedCard} rotation={180} />\n        )}\n        </View>\n        {/* Left Player */}\n        <View style={[styles.playerContainer, styles.leftPlayer]}>\n            <View style={[styles.avatarNameContainer,\n            currentPlayerIndex===3 && styles.currentPlayerWrapper]}>\n                <Image source={players[3].avatar ? players[3].avatar : defaultAvatars[3]} style={styles.avatar} />\n                <Text style={styles.playerName}>{players[3].name}</Text>\n                <Text style={styles.playerName}>Score : {players[3].score}</Text>\n            </View>\n            <Button\n            title={bottonTitle}\n            onPress={() => handleShowCollectedCards(players[3])}\n            />\n            <Hand hand={players[3].hand} rotation={0} visible={false} />\n        </View>\n        {/* Played card of Left Player */}\n        <View style={[styles.playedCardContainer, { left: 450 }]}>\n            {players[3].currentPlayedCard != null && (\n            <Card card={players[3].currentPlayedCard} rotation={180} />\n        )}\n        </View>\n        {/* Right Player */}\n        <View style={[styles.playerContainer, styles.rightPlayer]}>\n            <View style={[styles.avatarNameContainer, \n            currentPlayerIndex===1 && styles.currentPlayerWrapper]}>\n                <Image source={players[1].avatar ? players[1].avatar : defaultAvatars[1]} style={styles.avatar} />\n                <Text style={styles.playerName}>{players[1].name}</Text>\n                <Text style={styles.playerName}>Score : {players[1].score}</Text>\n            </View>\n            <Button\n            title={bottonTitle}\n            onPress={() => handleShowCollectedCards(players[1])}\n            />\n            <Hand hand={players[1].hand} rotation={0} visible={false} />\n        </View>\n\n        {/* Played card of Right Player */}\n        <View style={[styles.playedCardContainer, { right: 450 }]}>\n            {players[1].currentPlayedCard != null && (\n            <Card card={players[1].currentPlayedCard} rotation={180} />\n        )}\n        </View>\n        {/* Bottom Player */}\n        <View style={[styles.playerContainer, styles.bottomPlayer]}>\n            <Hand hand={players[0].hand} rotation={0} visible={true} \n                selectable={isYourTurn && !isDeclarationPhase}\n                selectedCard={isYourTurn ? selectedCard : null}\n                setSelectedCard={setSelectedCard}/>\n            <View style={[styles.avatarNameContainer, \n                currentPlayerIndex===0 && styles.currentPlayerWrapper,]} >\n                \n                <Image source={players[0].avatar ? players[0].avatar : defaultAvatars[0]} style={styles.avatar} />\n                <Text style={styles.playerName}>{players[0].name}</Text>\n                <Text style={styles.playerName}>Score : {players[0].score}</Text>\n                <Button\n                    title={bottonTitle}\n                    onPress={() => handleShowCollectedCards(players[0])}\n                />\n            </View>\n        </View>\n        {/* Played card of Bottom Player */}\n        <View style={[styles.playedCardContainer, { bottom: 180 }]}>\n            {players[0].currentPlayedCard != null && (\n            <Card card={players[0].currentPlayedCard} rotation={180} />\n        )}\n\n        {/* Modal for Collected Cards */}\n        </View>\n        {selectedPlayer && (\n            <Modal\n            visible={true}\n            animationType=\"none\"\n            transparent={true}\n            onRequestClose={handleCloseModal}\n            >\n            <View style={styles.modalContainer}>\n                <Text style={styles.modalTitle}>\n                {selectedPlayer.name}'s Cards & Declaration\n                </Text>\n                {/* Collected Cards */}\n                <Text style={styles.sectionTitle}>Collected Cards:</Text>\n                <FlatList\n                data={selectedPlayer.collectedCards}\n                keyExtractor={(item) => item.id}\n                renderItem={({ item }) => (\n                    <Card card={item} />\n                )}\n                horizontal={true}\n                contentContainerStyle={styles.cardsContainer}\n                />\n                {/* Played Cards */}\n                <Text style={styles.sectionTitle}>Played Cards:</Text>\n                <FlatList\n                data={selectedPlayer.playedCards}\n                keyExtractor={(item) => item.id}\n                renderItem={({ item }) => (\n                    <Card card={item} />\n                )}\n                horizontal={true}\n                contentContainerStyle={styles.cardsContainer}\n                />\n\n                {/* Declared Cards */}\n                <Text style={styles.sectionTitle}>Close Declared Cards:</Text>\n                <FlatList\n                data={selectedPlayer.closedDeclaredCards}\n                keyExtractor={(item) => item.id}\n                renderItem={({ item }) => (\n                    <Card card={item} visible={item.known}/>\n                )}\n                horizontal={true}\n                contentContainerStyle={styles.cardsContainer}\n                />\n                <Text style={styles.sectionTitle}>Open Declared Cards:</Text>\n                <FlatList\n                data={selectedPlayer.openDeclaredCards}\n                keyExtractor={(item) => item.id}\n                renderItem={({ item }) => (\n                    <Card card={item} />\n                )}\n                horizontal={true}\n                contentContainerStyle={styles.cardsContainer}\n                />\n\n\n                <Button title=\"Close\" onPress={handleCloseModal} />\n            </View>\n            </Modal>\n        )}\n\n        {/* Modal for Full Log */}\n        <Modal\n            visible={isLogExpanded}\n            animationType=\"none\"\n            transparent={true}\n            onRequestClose={toggleLog}\n        >\n            <View style={styles.modalContainer}>\n            <Text style={styles.modalTitle}>Full Log</Text>\n            <FlatList\n                data={logs}\n                keyExtractor={(item, index) => index.toString()}\n                renderItem={({ item }) => <Text style={styles.modalLogText}>{item}</Text>}\n            />\n            <Button title=\"Close\" onPress={toggleLog} />\n            </View>\n        </Modal>\n\n        {/* Conditional Button */}\n            <Text style={styles.playerName}>Estimated Action Value : {actionValue}</Text>\n            {loading?\n             <Text>Loading...</Text> : \n             isEndEpisode? \n                <Button title=\"New Game (n)\" onPress={handleNextTurn} /> : \n            isEndOneRound ? \n                <Button title=\"End this Round (n)\" onPress={handleNextTurn} /> : \n            (isYourTurn ? ( isDeclarationPhase ? \n                <View>\n                    <Declaration \n                        hand={players[0].hand} \n                        declarations={declarations}\n                        setDeclarations={setDeclarations}\n                    />\n                    <Button title=\"Finish Declaration (n)\" onPress={handleNextTurn} />\n                </View> :\n                <Button title=\"Play Selected Card (n)\" onPress={handleNextTurn} /> \n            ):\n                <Button title=\"Next (n)\" onPress={handleNextTurn} />\n            )}\n\n        {/* Log Section */}\n        <View style={styles.logSection}>\n            <Text style={styles.logTitle}>Logs:</Text>\n            <FlatList\n            data={logs}\n            keyExtractor={(item, index) => index.toString()}\n            renderItem={({ item }) => <Text style={styles.logText}>{item}</Text>}\n            />\n            <TouchableOpacity style={styles.expandButton} onPress={toggleLog}>\n                <Text style={styles.expandButtonText}>Expand</Text>\n            </TouchableOpacity>\n        </View>\n\n    </View>\n        \n    );\n};\n\nconst styles = StyleSheet.create({\n  tableContainer: {\n    flex: 1,\n    justifyContent: 'center',\n    alignItems: 'center',\n    width: '100%',\n  },\n  playerContainer: {\n    position: 'absolute',\n    alignItems: 'center',\n  },\n  topPlayer: {\n    top: 20,\n    flexDirection: 'row',\n    transform: [{ rotate: '180deg' }],\n  },\n  bottomPlayer: {\n    bottom: 20,\n    flexDirection: 'row',\n    alignItems: 'center',\n  },\n  leftPlayer: {\n    left: 20,\n    justifyContent: 'center',\n    transform: [{ rotate: '90deg' }],\n  },\n  rightPlayer: {\n    right: 20,\n    justifyContent: 'center',\n    transform: [{ rotate: '-90deg' }],\n  },\n  avatar: {\n    width: 50,\n    height: 50,\n    borderRadius: 25,\n    marginBottom: 5,\n  },\n  playerName: {\n    fontSize: 16,\n    fontWeight: 'bold',\n    color: '#222222',\n    marginBottom: 5,\n  },\n  avatarNameContainer: {\n    marginLeft: 10,\n    alignItems: 'center',\n  },\n  currentPlayerWrapper: {\n    borderWidth: 5,\n    borderColor: '#FFD700', \n    borderRadius: -5,\n  },\n  modalContainer: {\n    flex: 1,\n    justifyContent: 'center',\n    backgroundColor: 'rgba(0, 0, 0, 0.8)',\n    padding: 20,\n  },\n  modalTitle: {\n    fontSize: 18,\n    fontWeight: 'bold',\n    color: '#fff',\n    textAlign: 'center',\n    marginBottom: 10,\n  },\n  cardsContainer: {\n    flexDirection: 'row',\n    justifyContent: 'center',\n    marginBottom: 2,\n  },\n  sectionTitle: {\n    fontSize: 16,\n    fontWeight: 'bold',\n    color: '#FFD700',\n  },\n  playedCardContainer: {\n    position: 'absolute',\n    zIndex: 2,\n  },\n  logSection: {\n    position: 'absolute',\n    bottom: 0,\n    left: 0,\n    width: '23%', \n    maxHeight: '14%', \n    backgroundColor: '#222',\n    padding: 10,\n    borderTopRightRadius: 10,\n    borderBottomRightRadius: 0,\n    borderTopLeftRadius: 0,\n    borderBottomLeftRadius: 10,\n    overflow: 'hidden',\n  },\n  logTitle: {\n    color: '#fff',\n    fontSize: 16,\n    fontWeight: 'bold',\n    marginBottom: 5,\n  },\n  logText: {\n    color: '#ccc',\n    fontSize: 14,\n  },\n  modalLogText: {\n    color: '#fff',\n    fontSize: 14,\n    marginBottom: 5,\n  },\n  expandButton: {\n    marginTop: 10,\n    padding: 5,\n    backgroundColor: '#444',\n    alignItems: 'center',\n    borderRadius: 5,\n  },\n  expandButtonText: {\n    color: '#fff',\n    fontSize: 14,\n  },\n});\n  \n\nexport default GameTable;\n","// Game page\nimport React, { useState } from 'react';\nimport { View, Text, Button, StyleSheet, TouchableOpacity } from 'react-native';\nimport GameTable from '../components/GameTable';\n\nconst GameOnline : React.FC = () => {\n  const [gameStarted, setGameStarted] = useState<boolean>(false);\n  const [aiPolicy, setAiPolicy] = useState<String>(\"random\");\n  const [gameMode, setGameMode] = useState<String>(\"full\");\n  const [declaration, setDeclaration] = useState<String>(\"enable\");\n\n  return (\n    <View style={styles.container}>\n      {!gameStarted ? (\n        // Game configurations\n        <View style={{ padding: 20 }}>\n          <Text>AI Algorithm:</Text>\n          <View style={{ flexDirection: \"row\", marginTop: 10, justifyContent: \"space-between\" }}>\n          {[\"random\", \"greedy\", \"DMC\", \"MFE\"].map((option) => (\n            <TouchableOpacity\n              key={option}\n              onPress={() => setAiPolicy(option)}\n              style={{\n                flexDirection: \"row\",\n                alignItems: \"center\",\n                padding: 10,\n                backgroundColor: aiPolicy === option ? \"#007AFF\" : \"#BBB\",\n                borderRadius: 5,\n                marginVertical: 5,\n              }}\n            >\n              <Text style={{ color: aiPolicy === option ? \"white\" : \"black\" }}>\n                {option}\n              </Text>\n            </TouchableOpacity>\n          ))}\n          </View>\n          <Text>Display Mode:</Text>\n          <View style={{ flexDirection: \"row\", marginTop: 10, justifyContent: \"space-between\" }}>\n          {[\"full\", \"state-only\"].map((option) => (\n            <TouchableOpacity\n              key={option}\n              onPress={() => setGameMode(option)}\n              style={{\n                flexDirection: \"row\",\n                alignItems: \"center\",\n                padding: 10,\n                backgroundColor: gameMode === option ? \"#007AFF\" : \"#BBB\",\n                borderRadius: 5,\n                marginVertical: 5,\n              }}\n            >\n              <Text style={{ color: gameMode === option ? \"white\" : \"black\" }}>\n                {option}\n              </Text>\n            </TouchableOpacity>\n          ))}\n          </View>\n          <Text>Declaration:</Text>\n          <View style={{ flexDirection: \"row\", marginTop: 10, justifyContent: \"space-between\" }}>\n          {[\"enable\", \"disable\"].map((option) => (\n            <TouchableOpacity\n              key={option}\n              onPress={() => setDeclaration(option)}\n              style={{\n                flexDirection: \"row\",\n                alignItems: \"center\",\n                padding: 10,\n                backgroundColor: declaration === option ? \"#007AFF\" : \"#BBB\",\n                borderRadius: 5,\n                marginVertical: 5,\n              }}\n            >\n              <Text style={{ color: declaration === option ? \"white\" : \"black\" }}>\n                {option}\n              </Text>\n            </TouchableOpacity>\n          ))}\n          </View>\n          <View style={styles.buttonContainer}>        \n              <Button title=\"Start Game!\" onPress={() => setGameStarted(true)} />\n          </View>\n        </View>   \n      ) : (\n        // Start game\n        <GameTable \n          initialPlayers={[]} \n          online={true}\n          ai={aiPolicy}\n          gameMode={gameMode}  // full version or state-only version\n          enable_declarations={declaration==\"enable\"}  // Enable or Disable declaration of the game\n        />\n      )}\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  tableContainer: {\n    flex: 1,\n    justifyContent: 'center',\n    alignItems: 'center',\n    backgroundColor: '#008000', \n  },\n  playerContainer: {\n    position: 'absolute',\n    alignItems: 'center',\n  },\n  buttonContainer: {\n    marginBottom: 16, \n    width: '80%', \n  },\n  container: {\n    flex: 1,\n    justifyContent: 'center',\n    alignItems: 'center',\n  },\n  title: {\n    fontSize: 20,\n    fontWeight: 'bold',\n    marginBottom: 16,\n    textAlign: 'center',\n  },\n  card: {\n    fontSize: 18,\n    textAlign: 'center',\n    marginVertical: 4,\n    color: '#333',\n  },\n  cardWrapper: {\n    position: 'absolute', \n    zIndex: 1, \n  },\n  listContent: {\n    height: '100%',\n  },\n  topHand: {\n    top: 20,\n    alignItems: 'center',\n    transform: [{ rotate: '180deg' }],\n  },\n  bottomHand: {\n    bottom: 20,\n    alignItems: 'center',\n  },\n  leftHand: {\n    left: 20,\n    justifyContent: 'center',\n    transform: [{ rotate: '-90deg' }],\n  },\n  rightHand: {\n    right: 20,\n    justifyContent: 'center',\n    transform: [{ rotate: '90deg' }],\n  },\n});\n\nexport default GameOnline;\n","import React from 'react';\nimport { NavigationContainer } from '@react-navigation/native';\n// import { View, StyleSheet, Text } from 'react-native';\nimport { createNativeStackNavigator } from '@react-navigation/native-stack';\nimport IndexPage from './src/pages/IndexPage';\n// import GamePage from './src/pages/GamePage'; \nimport RulesPage from './src/pages/RulesPage';\nimport GameOnline from './src/pages/GameOnline'; \n\nconst Stack = createNativeStackNavigator();\n\nconst App: React.FC = () => {\n  return (\n    <NavigationContainer>\n      <Stack.Navigator initialRouteName=\"IndexPage\">\n        <Stack.Screen name=\"IndexPage\" component={IndexPage} options={{ title: 'Gongzhu Emulator' }} />\n        {/* <Stack.Screen name=\"GamePage\" component={GamePage} options={{ title: 'Game' }} /> */}\n        <Stack.Screen name=\"GameOnline\" component={GameOnline} options={{ title: 'Have fun Gongzhu!' }} />\n        <Stack.Screen name=\"RulesPage\" component={RulesPage} options={{ title: 'Gongzhu Rules' }} />\n      </Stack.Navigator>\n    </NavigationContainer>\n  );\n};\n\nexport default App;","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n// expose the modules object (__webpack_modules__)\n__webpack_require__.m = __webpack_modules__;\n\n","var deferred = [];\n__webpack_require__.O = (result, chunkIds, fn, priority) => {\n\tif(chunkIds) {\n\t\tpriority = priority || 0;\n\t\tfor(var i = deferred.length; i > 0 && deferred[i - 1][2] > priority; i--) deferred[i] = deferred[i - 1];\n\t\tdeferred[i] = [chunkIds, fn, priority];\n\t\treturn;\n\t}\n\tvar notFulfilled = Infinity;\n\tfor (var i = 0; i < deferred.length; i++) {\n\t\tvar [chunkIds, fn, priority] = deferred[i];\n\t\tvar fulfilled = true;\n\t\tfor (var j = 0; j < chunkIds.length; j++) {\n\t\t\tif ((priority & 1 === 0 || notFulfilled >= priority) && Object.keys(__webpack_require__.O).every((key) => (__webpack_require__.O[key](chunkIds[j])))) {\n\t\t\t\tchunkIds.splice(j--, 1);\n\t\t\t} else {\n\t\t\t\tfulfilled = false;\n\t\t\t\tif(priority < notFulfilled) notFulfilled = priority;\n\t\t\t}\n\t\t}\n\t\tif(fulfilled) {\n\t\t\tdeferred.splice(i--, 1)\n\t\t\tvar r = fn();\n\t\t\tif (r !== undefined) result = r;\n\t\t}\n\t}\n\treturn result;\n};","// getDefaultExport function for compatibility with non-harmony modules\n__webpack_require__.n = (module) => {\n\tvar getter = module && module.__esModule ?\n\t\t() => (module['default']) :\n\t\t() => (module);\n\t__webpack_require__.d(getter, { a: getter });\n\treturn getter;\n};","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.g = (function() {\n\tif (typeof globalThis === 'object') return globalThis;\n\ttry {\n\t\treturn this || new Function('return this')();\n\t} catch (e) {\n\t\tif (typeof window === 'object') return window;\n\t}\n})();","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","__webpack_require__.p = \"/gongzhu/\";","// no baseURI\n\n// object to store loaded and loading chunks\n// undefined = chunk not loaded, null = chunk preloaded/prefetched\n// [resolve, reject, Promise] = chunk loading, 0 = chunk loaded\nvar installedChunks = {\n\t792: 0\n};\n\n// no chunk on demand loading\n\n// no prefetching\n\n// no preloaded\n\n// no HMR\n\n// no HMR manifest\n\n__webpack_require__.O.j = (chunkId) => (installedChunks[chunkId] === 0);\n\n// install a JSONP callback for chunk loading\nvar webpackJsonpCallback = (parentChunkLoadingFunction, data) => {\n\tvar [chunkIds, moreModules, runtime] = data;\n\t// add \"moreModules\" to the modules object,\n\t// then flag all \"chunkIds\" as loaded and fire callback\n\tvar moduleId, chunkId, i = 0;\n\tif(chunkIds.some((id) => (installedChunks[id] !== 0))) {\n\t\tfor(moduleId in moreModules) {\n\t\t\tif(__webpack_require__.o(moreModules, moduleId)) {\n\t\t\t\t__webpack_require__.m[moduleId] = moreModules[moduleId];\n\t\t\t}\n\t\t}\n\t\tif(runtime) var result = runtime(__webpack_require__);\n\t}\n\tif(parentChunkLoadingFunction) parentChunkLoadingFunction(data);\n\tfor(;i < chunkIds.length; i++) {\n\t\tchunkId = chunkIds[i];\n\t\tif(__webpack_require__.o(installedChunks, chunkId) && installedChunks[chunkId]) {\n\t\t\tinstalledChunks[chunkId][0]();\n\t\t}\n\t\tinstalledChunks[chunkId] = 0;\n\t}\n\treturn __webpack_require__.O(result);\n}\n\nvar chunkLoadingGlobal = self[\"webpackChunkweb\"] = self[\"webpackChunkweb\"] || [];\nchunkLoadingGlobal.forEach(webpackJsonpCallback.bind(null, 0));\nchunkLoadingGlobal.push = webpackJsonpCallback.bind(null, chunkLoadingGlobal.push.bind(chunkLoadingGlobal));","// startup\n// Load entry module and return exports\n// This entry module depends on other loaded chunks and execution need to be delayed\nvar __webpack_exports__ = __webpack_require__.O(undefined, [681], () => (__webpack_require__(5036)))\n__webpack_exports__ = __webpack_require__.O(__webpack_exports__);\n"],"names":["IndexPage","_ref","navigation","_jsxs","View","style","styles","container","children","_jsx","buttonContainer","Button","title","onPress","navigate","footer","Text","footerText","StyleSheet","create","flex","justifyContent","alignItems","marginBottom","width","height","fontSize","color","require","default","cardContainer","margin","cardImage","card","rotation","visible","undefined","cardName","suit","rank","cardImages","Image","source","transform","rotate","resizeMode","PIG","id","SHEEP","DOUBLER","BLOOD","BlOODS","SPECIAL_CARDS","handContainer","position","overflow","fontWeight","textAlign","cardWrapper","zIndex","translateY","listContent","flexDirection","paddingBottom","selectedCardWrapper","borderWidth","borderColor","borderRadius","hand","spacing","selectable","selectedCard","setSelectedCard","_useState","useState","_useState2","_slicedToArray","numberOfCards","length","FlatList","horizontal","data","keyExtractor","item","renderItem","_ref2","index","TouchableOpacity","left","Card","contentContainerStyle","_ref3","HandExample1","HandExample2","HandExample3","concat","_toConsumableArray","backgroundColor","contentContainer","padding","sectionTitle","marginTop","sectionSubTitle","text","lineHeight","bulletedList","marginLeft","highlight","paddingHorizontal","strongHighlight","ScrollView","Hand","slice","OneDeclaration","specialCard","specialCardName","declarations","setDeclarations","map","option","prevDecs","_objectSpread","_defineProperty","marginVertical","has_pig","has_sheep","has_blood","has_doubler","condition","name","defaultAvatars","tableContainer","playerContainer","topPlayer","top","bottomPlayer","bottom","leftPlayer","rightPlayer","right","avatar","playerName","avatarNameContainer","currentPlayerWrapper","modalContainer","modalTitle","cardsContainer","playedCardContainer","logSection","maxHeight","borderTopRightRadius","borderBottomRightRadius","borderTopLeftRadius","borderBottomLeftRadius","logTitle","logText","modalLogText","expandButton","expandButtonText","initialPlayers","online","_ref$ai","ai","gameMode","enable_declarations","bottonTitle","players","setPlayers","_useState3","_useState4","selectedPlayer","setSelectedPlayer","_useState5","_useState6","_useState7","_useState8","firstPlayerIndices","setFirstPlayerIndices","_useState9","_useState10","history","setHistory","_useState11","_useState12","setFirstPlayerIndex","_useState13","_useState14","readyToLog","setReadyToLog","_useState15","_useState16","currentPlayerIndex","setCurrentPlayerIndex","_useState17","_useState18","roundCount","setRoundCount","_useState19","_useState20","gameId","setGameId","_useState21","_useState22","cardsPlayedThisRound","setCardsPlayedThisRound","_useState23","_useState24","logs","setLogs","_useState25","_useState26","isLogExpanded","setIsLogExpanded","_useState27","_useState28","loading","setLoading","_useState29","_useState30","started","setStarted","_useState31","_useState32","setError","_useState33","_useState34","isDeclarationPhase","setDeclarationPhase","_useState35","_useState36","_useState37","_useState38","actionValue","setActionValue","API_URL","addLog","message","prevLogs","toggleLog","handleNextTurn","isEndOneRound","endOneRound","isEndEpisode","endEpisode","isYourTurn","handleDeclarations","handlePlaySelectedCard","handleNextPlayer","handleStep","fetchLogs","_asyncToGenerator","i","player","addDeclarationsLog","closedDeclaredCards","openDeclaredCards","r","move","largest_player","apply","arguments","convertToDeclarationRequest","push","requestData","axios","post","then","response","status","fetchGameStates","catch","error","console","currentPlayedCard","playACard","warn","handleShowCollectedCards","handleCloseModal","findIndex","playedCards","splice","prevCards","largestIndex","Math","floor","random","prevCount","collectedCards","statusCode","startGame","_ref4","game_state","firstPlayerIndex","err","_x","useEffect","evaluation","handleKeyPress","event","key","toLowerCase","window","addEventListener","removeEventListener","score","Modal","animationType","transparent","onRequestClose","_ref5","_ref6","_ref7","known","_ref8","toString","_ref9","Declaration","_ref10","topHand","bottomHand","leftHand","rightHand","gameStarted","setGameStarted","aiPolicy","setAiPolicy","setGameMode","declaration","setDeclaration","GameTable","Stack","createNativeStackNavigator","NavigationContainer","Navigator","initialRouteName","Screen","component","options","GameOnline","RulesPage","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","exports","module","__webpack_modules__","m","deferred","O","result","chunkIds","fn","priority","notFulfilled","Infinity","fulfilled","j","Object","keys","every","n","getter","__esModule","d","a","definition","o","defineProperty","enumerable","get","g","globalThis","this","Function","e","obj","prop","prototype","hasOwnProperty","call","Symbol","toStringTag","value","p","installedChunks","chunkId","webpackJsonpCallback","parentChunkLoadingFunction","moreModules","runtime","some","chunkLoadingGlobal","self","forEach","bind","__webpack_exports__"],"sourceRoot":""}