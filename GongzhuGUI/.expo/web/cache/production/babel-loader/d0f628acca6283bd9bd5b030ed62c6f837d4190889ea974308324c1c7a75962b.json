{"ast":null,"code":"\"use strict\";var _globalThis$contexts;import*as React from'react';var contexts='__react_navigation__elements_contexts';globalThis[contexts]=(_globalThis$contexts=globalThis[contexts])!=null?_globalThis$contexts:new Map();export function getNamedContext(name,initialValue){var context=globalThis[contexts].get(name);if(context){return context;}context=React.createContext(initialValue);context.displayName=name;globalThis[contexts].set(name,context);return context;}","map":{"version":3,"names":["React","contexts","globalThis","_globalThis$contexts","Map","getNamedContext","name","initialValue","context","get","createContext","displayName","set"],"sources":["/Users/yuezhang/Documents/projects/gongzhu/GongzhuGUI/node_modules/@react-navigation/elements/src/getNamedContext.tsx"],"sourcesContent":["import * as React from 'react';\n\nconst contexts = '__react_navigation__elements_contexts';\n\ndeclare global {\n  // eslint-disable-next-line no-var\n  var __react_navigation__elements_contexts: Map<string, React.Context<any>>;\n}\n\n// We use a global variable to keep our contexts so that we can reuse same contexts across packages\nglobalThis[contexts] =\n  globalThis[contexts] ?? new Map<string, React.Context<any>>();\n\nexport function getNamedContext<T>(\n  name: string,\n  initialValue: T\n): React.Context<T> {\n  let context = globalThis[contexts].get(name);\n\n  if (context) {\n    return context;\n  }\n\n  context = React.createContext<T>(initialValue);\n  context.displayName = name;\n\n  globalThis[contexts].set(name, context);\n\n  return context;\n}\n"],"mappings":"sCAAA,MAAO,GAAK,CAAAA,KAAK,KAAM,OAAO,CAE9B,GAAM,CAAAC,QAAQ,CAAG,uCAAuC,CAQxDC,UAAU,CAACD,QAAQ,CAAC,EAAAE,oBAAA,CAClBD,UAAU,CAACD,QAAQ,CAAC,QAAAE,oBAAA,CAAI,GAAI,CAAAC,GAAG,CAA6B,CAAC,CAE/D,MAAO,SAAS,CAAAC,eAAeA,CAC7BC,IAAY,CACZC,YAAe,CACG,CAClB,GAAI,CAAAC,OAAO,CAAGN,UAAU,CAACD,QAAQ,CAAC,CAACQ,GAAG,CAACH,IAAI,CAAC,CAE5C,GAAIE,OAAO,CAAE,CACX,MAAO,CAAAA,OAAO,CAChB,CAEAA,OAAO,CAAGR,KAAK,CAACU,aAAa,CAAIH,YAAY,CAAC,CAC9CC,OAAO,CAACG,WAAW,CAAGL,IAAI,CAE1BJ,UAAU,CAACD,QAAQ,CAAC,CAACW,GAAG,CAACN,IAAI,CAAEE,OAAO,CAAC,CAEvC,MAAO,CAAAA,OAAO,CAChB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}