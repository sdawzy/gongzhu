{"ast":null,"code":"import _asyncToGenerator from\"@babel/runtime/helpers/asyncToGenerator\";import _toConsumableArray from\"@babel/runtime/helpers/toConsumableArray\";import _slicedToArray from\"@babel/runtime/helpers/slicedToArray\";import React,{useState,useEffect}from'react';import View from\"react-native-web/dist/exports/View\";import Text from\"react-native-web/dist/exports/Text\";import Button from\"react-native-web/dist/exports/Button\";import StyleSheet from\"react-native-web/dist/exports/StyleSheet\";import Image from\"react-native-web/dist/exports/Image\";import Modal from\"react-native-web/dist/exports/Modal\";import FlatList from\"react-native-web/dist/exports/FlatList\";import TouchableOpacity from\"react-native-web/dist/exports/TouchableOpacity\";import Card from'../components/Card';import{PIG,SHEEP,BLOOD,DOUBLER}from'../components/specialCards';import Hand from'../components/Hand';import Declaration from'./Declaration';import axios from'axios';import{jsx as _jsx,jsxs as _jsxs}from\"react/jsx-runtime\";;var defaultAvatars=[require('../../assets/images/avatars/You.png'),require('../../assets/images/avatars/Panda.png'),require('../../assets/images/avatars/Penguin.png'),require('../../assets/images/avatars/Elephant.png')];var GameTable=function GameTable(_ref){var initialPlayers=_ref.initialPlayers,online=_ref.online,_ref$ai=_ref.ai,ai=_ref$ai===void 0?\"normal\":_ref$ai,gameMode=_ref.gameMode,enable_declarations=_ref.enable_declarations;var maxRounds=13;var bottonTitle=\"Show Cards & Declaration\";var _useState=useState(online?[]:initialPlayers),_useState2=_slicedToArray(_useState,2),players=_useState2[0],setPlayers=_useState2[1];var _useState3=useState(null),_useState4=_slicedToArray(_useState3,2),selectedPlayer=_useState4[0],setSelectedPlayer=_useState4[1];var _useState5=useState(null),_useState6=_slicedToArray(_useState5,2),selectedCard=_useState6[0],setSelectedCard=_useState6[1];var _useState7=useState([]),_useState8=_slicedToArray(_useState7,2),firstPlayerIndices=_useState8[0],setFirstPlayerIndices=_useState8[1];var _useState9=useState([]),_useState10=_slicedToArray(_useState9,2),history=_useState10[0],setHistory=_useState10[1];var _useState11=useState(0),_useState12=_slicedToArray(_useState11,2),firstPlayerIndex=_useState12[0],setFirstPlayerIndex=_useState12[1];var _useState13=useState(false),_useState14=_slicedToArray(_useState13,2),readyToLog=_useState14[0],setReadyToLog=_useState14[1];var _useState15=useState(0),_useState16=_slicedToArray(_useState15,2),currentPlayerIndex=_useState16[0],setCurrentPlayerIndex=_useState16[1];var _useState17=useState(0),_useState18=_slicedToArray(_useState17,2),roundCount=_useState18[0],setRoundCount=_useState18[1];var _useState19=useState(null),_useState20=_slicedToArray(_useState19,2),gameId=_useState20[0],setGameId=_useState20[1];var _useState21=useState([]),_useState22=_slicedToArray(_useState21,2),cardsPlayedThisRound=_useState22[0],setCardsPlayedThisRound=_useState22[1];var _useState23=useState([]),_useState24=_slicedToArray(_useState23,2),logs=_useState24[0],setLogs=_useState24[1];var _useState25=useState(false),_useState26=_slicedToArray(_useState25,2),isLogExpanded=_useState26[0],setIsLogExpanded=_useState26[1];var _useState27=useState(online?true:false),_useState28=_slicedToArray(_useState27,2),loading=_useState28[0],setLoading=_useState28[1];var _useState29=useState(false),_useState30=_slicedToArray(_useState29,2),started=_useState30[0],setStarted=_useState30[1];var _useState31=useState(null),_useState32=_slicedToArray(_useState31,2),error=_useState32[0],setError=_useState32[1];var _useState33=useState(false),_useState34=_slicedToArray(_useState33,2),isDeclarationPhase=_useState34[0],setDeclarationPhase=_useState34[1];var _useState35=useState({\"pig\":'no','sheep':'no',\"doubler\":'no',\"blood\":'no'}),_useState36=_slicedToArray(_useState35,2),declarations=_useState36[0],setDeclarations=_useState36[1];var _useState37=useState(null),_useState38=_slicedToArray(_useState37,2),actionValue=_useState38[0],setActionValue=_useState38[1];var API_URL=\"http://0.0.0.0:1926\";var addLog=function addLog(message){setLogs(function(prevLogs){return[message].concat(_toConsumableArray(prevLogs));});};var toggleLog=function toggleLog(){setIsLogExpanded(!isLogExpanded);};var handleNextTurn=function handleNextTurn(){if(gameMode==\"full\"){if(isEndOneRound){endOneRound();return;}else if(isEndEpisode){endEpisode();}else if(isYourTurn){if(isDeclarationPhase){handleDeclarations();}else{handlePlaySelectedCard();}}else{handleNextPlayer();}}else{if(isEndEpisode){endEpisode();}else{handleStep();}}};var fetchLogs=function(){var _ref2=_asyncToGenerator(function*(){setLogs([]);if(enable_declarations){addLog('---Declaration phase---');for(var i=0;i<4;i++){var player=players[(i+firstPlayerIndices[0])%4];addDeclarationsLog(player.name,{\"closed_declarations\":player.closedDeclaredCards,\"open_declarations\":player.openDeclaredCards});}if(!isDeclarationPhase){addLog('---End Declaration phase---');}}for(var r=0;r<roundCount;r++){addLog(`---Round ${r+1}---`);for(var _i=0;_i<4;_i++){var _player=players[(_i+firstPlayerIndices[r])%4];var move=history[r*4+_i];addLog(`Round ${r+1}: `+`${_player.name} played ${move.rank} of ${move.suit}.`);}var largest_player=players[firstPlayerIndices[r+1]];addLog(`${largest_player.name} was the largest.`);addLog(`---End Round ${r+1}---`);}if(!isDeclarationPhase){addLog(`---Round ${roundCount+1}---`);}for(var _i2=0;_i2<cardsPlayedThisRound.length;_i2++){var _player2=players[(_i2+firstPlayerIndices[roundCount])%4];var _move=history[roundCount*4+_i2];addLog(`Round ${roundCount+1}: `+`${_player2.name} played ${_move.rank} of ${_move.suit}.`);}});return function fetchLogs(){return _ref2.apply(this,arguments);};}();var convertToDeclarationRequest=function convertToDeclarationRequest(){var closedDeclaredCards=[];var openDeclaredCards=[];if(declarations['pig']!='no'){if(declarations['pig']=='open'){openDeclaredCards.push(PIG);}else{closedDeclaredCards.push(PIG);}}if(declarations['sheep']!='no'){if(declarations['sheep']=='open'){openDeclaredCards.push(SHEEP);}else{closedDeclaredCards.push(SHEEP);}}if(declarations['blood']!='no'){if(declarations['blood']=='open'){openDeclaredCards.push(BLOOD);}else{closedDeclaredCards.push(BLOOD);}}if(declarations['doubler']!='no'){if(declarations['doubler']=='open'){openDeclaredCards.push(DOUBLER);}else{closedDeclaredCards.push(DOUBLER);}}return{'id':gameId,'closed_declarations':closedDeclaredCards,'open_declarations':openDeclaredCards};};var handleStep=function handleStep(){if(isDeclarationPhase){var requestData=convertToDeclarationRequest();axios.post(API_URL+'/step',requestData).then(function(response){var statusCode=response.status;if(statusCode===400){addLog(\"Invalid declaration by you. Please try again.\");return;}fetchGameStates(gameId);}).catch(function(error){if(error.status===400){return;}console.error('Error fetching playing card: ',error);});}if(selectedCard===null){console.warn('No card selected to play');return;}var currentPlayedCard=selectedCard;setSelectedCard(null);if(online){var _requestData={'id':gameId,'suit':currentPlayedCard.suit,'rank':currentPlayedCard.rank};axios.post(API_URL+'/step',_requestData).then(function(response){var statusCode=response.status;if(statusCode===400){addLog(\"Invalid move by you. Please try again.\");return;}fetchGameStates(gameId);}).catch(function(error){if(error.status===400){addLog(\"Invalid move by you. Please try again.\");return;}console.error('Error fetching playing card: ',error);});}else if(playACard(players[0],currentPlayedCard)){setCurrentPlayerIndex((currentPlayerIndex+1)%players.length);}};var handleShowCollectedCards=function handleShowCollectedCards(player){setSelectedPlayer(player);};var handleCloseModal=function handleCloseModal(){setSelectedPlayer(null);};var isValidMove=function isValidMove(card){return true;};var playACard=function playACard(player,card){var index=card===undefined?0:player.hand.findIndex(function(item){return item.id===card.id;});card=player.hand[index];if(isValidMove(card)){player.currentPlayedCard=card;player.playedCards.push(card);player.hand.splice(index,1);setCardsPlayedThisRound(function(prevCards){return[card].concat(_toConsumableArray(prevCards));});return true;}else{addLog(`Round ${roundCount+1}: Invalid move by ${player.name}.`);return false;}};var addDeclarationsLog=function addDeclarationsLog(name,declarations){for(var card of declarations[\"open_declarations\"]){if(card.id==PIG.id){addLog(`${name} openly declared Pig!`);}if(card.id==SHEEP.id){addLog(`${name} openly declared Sheep!`);}if(card.id==BLOOD.id){addLog(`${name} openly declared Blood!`);}if(card.id==DOUBLER.id){addLog(`${name} openly declared Doubler!`);}}if(name=='You'){for(var _card of declarations[\"closed_declarations\"]){if(_card.id==PIG.id){addLog(`${name} secretly declared Pig!`);}if(_card.id==SHEEP.id){addLog(`${name} secretly declared Sheep!`);}if(_card.id==BLOOD.id){addLog(`${name} secretly declared Blood!`);}if(_card.id==DOUBLER.id){addLog(`${name} secretly declared Doubler!`);}}}else{if(declarations[\"closed_declarations\"].length>0){addLog(`${name} secretly declared ${declarations[\"closed_declarations\"].length} card(s)!`);}}};var handleNextPlayer=function handleNextPlayer(){if(online){axios.post(API_URL+'/next_player',{'id':gameId}).then(function(response){var data=response.data;var move=data.move;fetchGameStates(gameId);}).catch(function(error){console.error('Error fetching next player: ',error);});}else if(playACard(players[currentPlayerIndex])){setCurrentPlayerIndex((currentPlayerIndex+1)%players.length);}};var handlePlaySelectedCard=function handlePlaySelectedCard(){if(selectedCard===null){console.warn('No card selected to play');return;}var currentPlayedCard=selectedCard;setSelectedCard(null);if(online){var requestData={'id':gameId,'suit':currentPlayedCard.suit,'rank':currentPlayedCard.rank};axios.post(API_URL+'/play_card',requestData).then(function(response){var statusCode=response.status;if(statusCode===400){addLog(\"Invalid move by you. Please try again.\");return;}fetchGameStates(gameId);}).catch(function(error){if(error.status===400){addLog(\"Invalid move by you. Please try again.\");return;}console.error('Error fetching playing card: ',error);});}else if(playACard(players[0],currentPlayedCard)){setCurrentPlayerIndex((currentPlayerIndex+1)%players.length);}};var endOneRound=function(){var _ref3=_asyncToGenerator(function*(){try{var largestIndex;if(online){var response=yield axios.post(API_URL+'/next_round',{'id':gameId});var data=response.data;largestIndex=data.largestIndex;yield fetchGameStates(gameId);}else{largestIndex=Math.floor(Math.random()*4);setRoundCount(function(prevCount){return prevCount+1;});}for(var i=0;i<players.length;i++){players[largestIndex].collectedCards.push(players[i].currentPlayedCard);players[i].currentPlayedCard=null;}if(roundCount<maxRounds){setCardsPlayedThisRound([]);setFirstPlayerIndex(largestIndex);setCurrentPlayerIndex(largestIndex);}else{setFirstPlayerIndex(-1);setCurrentPlayerIndex(-1);}}catch(error){console.error('Error in endOneRound: ',error);}});return function endOneRound(){return _ref3.apply(this,arguments);};}();var handleDeclarations=function handleDeclarations(){var requestData=convertToDeclarationRequest();axios.post(API_URL+'/make_declarations',requestData).then(function(response){var statusCode=response.status;addDeclarationsLog(\"You\",requestData);if(statusCode===400){addLog(\"Invalid declaration by you. Please try again.\");return;}fetchGameStates(gameId);}).catch(function(error){if(error.status===400){addLog(\"Invalid move by you. Please try again.\");return;}console.error('Error fetching playing card: ',error);});};var startGame=function startGame(){axios.post(API_URL+'/start_game',{\"ai\":ai,\"auto\":gameMode!='full',\"declaration\":enable_declarations}).then(function(response){fetchGameStates(response.data.id);setDeclarations({\"pig\":'no','sheep':'no',\"doubler\":'no',\"blood\":'no'});}).catch(function(error){console.error(\"There was an error starting the game!\",error);});};var endEpisode=function endEpisode(){startGame();};var fetchGameStates=function(){var _ref4=_asyncToGenerator(function*(id){try{setLoading(true);var response=yield axios.post(API_URL+'/get_game_state',{'id':id});var game_state=response.data.game_state;setPlayers(game_state.players);setFirstPlayerIndex(game_state.firstPlayerIndex);setRoundCount(game_state.roundCount);setCurrentPlayerIndex(game_state.currentPlayerIndex);setCardsPlayedThisRound(game_state.cardsPlayedThisRound);setDeclarationPhase(game_state.isDeclarationPhase);setGameId(id);setFirstPlayerIndices(game_state.firstPlayerIndices);setHistory(_toConsumableArray(game_state.history));setReadyToLog(true);}catch(err){console.error(\"Failed to fetch game states:\",err);setError(\"Failed to load player data.\");}finally{setLoading(false);setStarted(true);}});return function fetchGameStates(_x){return _ref4.apply(this,arguments);};}();if(online){useEffect(function(){startGame();},[]);}var isEndOneRound=false;if(players.length>0){isEndOneRound=players[0].currentPlayedCard!=null&&players[1].currentPlayedCard!=null&&players[2].currentPlayedCard!=null&&players[3].currentPlayedCard!=null;}var isEndEpisode=roundCount===maxRounds&&!isEndOneRound;var isYourTurn=currentPlayerIndex===0;if(isEndOneRound&&currentPlayerIndex!=-1){setCurrentPlayerIndex(-1);}useEffect(function(){if(readyToLog){fetchLogs();setReadyToLog(false);}},[readyToLog]);useEffect(function(){if(selectedCard==null){setActionValue(null);}else{var requestData={'id':gameId,'suit':selectedCard.suit,'rank':selectedCard.rank};axios.post(API_URL+'/evaluate',requestData).then(function(response){var statusCode=response.status;if(statusCode===400){return;}var data=response.data;var evaluation=data.evaluation;setActionValue(evaluation);}).catch(function(error){});}},[selectedCard]);useEffect(function(){var handleKeyPress=function handleKeyPress(event){if(event.key.toLowerCase()==='n'){handleNextTurn();}};window.addEventListener('keydown',handleKeyPress);return function(){window.removeEventListener('keydown',handleKeyPress);};},[players,selectedCard,currentPlayerIndex]);if(!started){return _jsx(Text,{children:\"Loading Game...\"});}return _jsxs(View,{style:styles.tableContainer,children:[_jsxs(View,{style:[styles.playerContainer,styles.topPlayer],children:[_jsx(Hand,{hand:players[2].hand,rotation:0,visible:false}),_jsxs(View,{style:[styles.avatarNameContainer,currentPlayerIndex===2&&styles.currentPlayerWrapper,{transform:[{rotate:'180deg'}]}],children:[_jsx(Image,{source:players[2].avatar?players[2].avatar:defaultAvatars[2],style:styles.avatar}),_jsx(Text,{style:styles.playerName,children:players[2].name}),_jsxs(Text,{style:styles.playerName,children:[\"Score : \",players[2].score]}),_jsx(Button,{title:bottonTitle,onPress:function onPress(){return handleShowCollectedCards(players[2]);}})]})]}),_jsx(View,{style:[styles.playedCardContainer,{top:180}],children:players[2].currentPlayedCard!=null&&_jsx(Card,{card:players[2].currentPlayedCard,rotation:180})}),_jsxs(View,{style:[styles.playerContainer,styles.leftPlayer],children:[_jsxs(View,{style:[styles.avatarNameContainer,currentPlayerIndex===3&&styles.currentPlayerWrapper],children:[_jsx(Image,{source:players[3].avatar?players[3].avatar:defaultAvatars[3],style:styles.avatar}),_jsx(Text,{style:styles.playerName,children:players[3].name}),_jsxs(Text,{style:styles.playerName,children:[\"Score : \",players[3].score]})]}),_jsx(Button,{title:bottonTitle,onPress:function onPress(){return handleShowCollectedCards(players[3]);}}),_jsx(Hand,{hand:players[3].hand,rotation:0,visible:false})]}),_jsx(View,{style:[styles.playedCardContainer,{left:450}],children:players[3].currentPlayedCard!=null&&_jsx(Card,{card:players[3].currentPlayedCard,rotation:180})}),_jsxs(View,{style:[styles.playerContainer,styles.rightPlayer],children:[_jsxs(View,{style:[styles.avatarNameContainer,currentPlayerIndex===1&&styles.currentPlayerWrapper],children:[_jsx(Image,{source:players[1].avatar?players[1].avatar:defaultAvatars[1],style:styles.avatar}),_jsx(Text,{style:styles.playerName,children:players[1].name}),_jsxs(Text,{style:styles.playerName,children:[\"Score : \",players[1].score]})]}),_jsx(Button,{title:bottonTitle,onPress:function onPress(){return handleShowCollectedCards(players[1]);}}),_jsx(Hand,{hand:players[1].hand,rotation:0,visible:false})]}),_jsx(View,{style:[styles.playedCardContainer,{right:450}],children:players[1].currentPlayedCard!=null&&_jsx(Card,{card:players[1].currentPlayedCard,rotation:180})}),_jsxs(View,{style:[styles.playerContainer,styles.bottomPlayer],children:[_jsx(Hand,{hand:players[0].hand,rotation:0,visible:true,selectable:isYourTurn&&!isDeclarationPhase,selectedCard:isYourTurn?selectedCard:null,setSelectedCard:setSelectedCard}),_jsxs(View,{style:[styles.avatarNameContainer,currentPlayerIndex===0&&styles.currentPlayerWrapper],children:[_jsx(Image,{source:players[0].avatar?players[0].avatar:defaultAvatars[0],style:styles.avatar}),_jsx(Text,{style:styles.playerName,children:players[0].name}),_jsxs(Text,{style:styles.playerName,children:[\"Score : \",players[0].score]}),_jsx(Button,{title:bottonTitle,onPress:function onPress(){return handleShowCollectedCards(players[0]);}})]})]}),_jsx(View,{style:[styles.playedCardContainer,{bottom:180}],children:players[0].currentPlayedCard!=null&&_jsx(Card,{card:players[0].currentPlayedCard,rotation:180})}),selectedPlayer&&_jsx(Modal,{visible:true,animationType:\"none\",transparent:true,onRequestClose:handleCloseModal,children:_jsxs(View,{style:styles.modalContainer,children:[_jsxs(Text,{style:styles.modalTitle,children:[selectedPlayer.name,\"'s Cards & Declaration\"]}),_jsx(Text,{style:styles.sectionTitle,children:\"Collected Cards:\"}),_jsx(FlatList,{data:selectedPlayer.collectedCards,keyExtractor:function keyExtractor(item){return item.id;},renderItem:function renderItem(_ref5){var item=_ref5.item;return _jsx(Card,{card:item});},horizontal:true,contentContainerStyle:styles.cardsContainer}),_jsx(Text,{style:styles.sectionTitle,children:\"Played Cards:\"}),_jsx(FlatList,{data:selectedPlayer.playedCards,keyExtractor:function keyExtractor(item){return item.id;},renderItem:function renderItem(_ref6){var item=_ref6.item;return _jsx(Card,{card:item});},horizontal:true,contentContainerStyle:styles.cardsContainer}),_jsx(Text,{style:styles.sectionTitle,children:\"Close Declared Cards:\"}),_jsx(FlatList,{data:selectedPlayer.closedDeclaredCards,keyExtractor:function keyExtractor(item){return item.id;},renderItem:function renderItem(_ref7){var item=_ref7.item;return _jsx(Card,{card:item,visible:item.known});},horizontal:true,contentContainerStyle:styles.cardsContainer}),_jsx(Text,{style:styles.sectionTitle,children:\"Open Declared Cards:\"}),_jsx(FlatList,{data:selectedPlayer.openDeclaredCards,keyExtractor:function keyExtractor(item){return item.id;},renderItem:function renderItem(_ref8){var item=_ref8.item;return _jsx(Card,{card:item});},horizontal:true,contentContainerStyle:styles.cardsContainer}),_jsx(Button,{title:\"Close\",onPress:handleCloseModal})]})}),_jsx(Modal,{visible:isLogExpanded,animationType:\"none\",transparent:true,onRequestClose:toggleLog,children:_jsxs(View,{style:styles.modalContainer,children:[_jsx(Text,{style:styles.modalTitle,children:\"Full Log\"}),_jsx(FlatList,{data:logs,keyExtractor:function keyExtractor(item,index){return index.toString();},renderItem:function renderItem(_ref9){var item=_ref9.item;return _jsx(Text,{style:styles.modalLogText,children:item});}}),_jsx(Button,{title:\"Close\",onPress:toggleLog})]})}),_jsxs(Text,{style:styles.playerName,children:[\"Estimated Action Value : \",actionValue]}),loading?_jsx(Text,{children:\"Loading...\"}):isEndEpisode?_jsx(Button,{title:\"New Game (n)\",onPress:handleNextTurn}):isEndOneRound?_jsx(Button,{title:\"End this Round (n)\",onPress:handleNextTurn}):isYourTurn?isDeclarationPhase?_jsxs(View,{children:[_jsx(Declaration,{hand:players[0].hand,declarations:declarations,setDeclarations:setDeclarations}),_jsx(Button,{title:\"Finish Declaration (n)\",onPress:handleNextTurn})]}):_jsx(Button,{title:\"Play Selected Card (n)\",onPress:handleNextTurn}):_jsx(Button,{title:\"Next (n)\",onPress:handleNextTurn}),_jsxs(View,{style:styles.logSection,children:[_jsx(Text,{style:styles.logTitle,children:\"Logs:\"}),_jsx(FlatList,{data:logs,keyExtractor:function keyExtractor(item,index){return index.toString();},renderItem:function renderItem(_ref10){var item=_ref10.item;return _jsx(Text,{style:styles.logText,children:item});}}),_jsx(TouchableOpacity,{style:styles.expandButton,onPress:toggleLog,children:_jsx(Text,{style:styles.expandButtonText,children:\"Expand\"})})]})]});};var styles=StyleSheet.create({tableContainer:{flex:1,justifyContent:'center',alignItems:'center',width:'100%'},playerContainer:{position:'absolute',alignItems:'center'},topPlayer:{top:20,flexDirection:'row',transform:[{rotate:'180deg'}]},bottomPlayer:{bottom:20,flexDirection:'row',alignItems:'center'},leftPlayer:{left:20,justifyContent:'center',transform:[{rotate:'90deg'}]},rightPlayer:{right:20,justifyContent:'center',transform:[{rotate:'-90deg'}]},avatar:{width:50,height:50,borderRadius:25,marginBottom:5},playerName:{fontSize:16,fontWeight:'bold',color:'#222222',marginBottom:5},avatarNameContainer:{marginLeft:10,alignItems:'center'},currentPlayerWrapper:{borderWidth:5,borderColor:'#FFD700',borderRadius:-5},modalContainer:{flex:1,justifyContent:'center',backgroundColor:'rgba(0, 0, 0, 0.8)',padding:20},modalTitle:{fontSize:18,fontWeight:'bold',color:'#fff',textAlign:'center',marginBottom:10},cardsContainer:{flexDirection:'row',justifyContent:'center',marginBottom:2},sectionTitle:{fontSize:16,fontWeight:'bold',color:'#FFD700'},playedCardContainer:{position:'absolute',zIndex:2},logSection:{position:'absolute',bottom:0,left:0,width:'23%',maxHeight:'14%',backgroundColor:'#222',padding:10,borderTopRightRadius:10,borderBottomRightRadius:0,borderTopLeftRadius:0,borderBottomLeftRadius:10,overflow:'hidden'},logTitle:{color:'#fff',fontSize:16,fontWeight:'bold',marginBottom:5},logText:{color:'#ccc',fontSize:14},modalLogText:{color:'#fff',fontSize:14,marginBottom:5},expandButton:{marginTop:10,padding:5,backgroundColor:'#444',alignItems:'center',borderRadius:5},expandButtonText:{color:'#fff',fontSize:14}});export default GameTable;","map":{"version":3,"names":["React","useState","useEffect","View","Text","Button","StyleSheet","Image","Modal","FlatList","TouchableOpacity","Card","PIG","SHEEP","BLOOD","DOUBLER","Hand","Declaration","axios","jsx","_jsx","jsxs","_jsxs","defaultAvatars","require","GameTable","_ref","initialPlayers","online","_ref$ai","ai","gameMode","enable_declarations","maxRounds","bottonTitle","_useState","_useState2","_slicedToArray","players","setPlayers","_useState3","_useState4","selectedPlayer","setSelectedPlayer","_useState5","_useState6","selectedCard","setSelectedCard","_useState7","_useState8","firstPlayerIndices","setFirstPlayerIndices","_useState9","_useState10","history","setHistory","_useState11","_useState12","firstPlayerIndex","setFirstPlayerIndex","_useState13","_useState14","readyToLog","setReadyToLog","_useState15","_useState16","currentPlayerIndex","setCurrentPlayerIndex","_useState17","_useState18","roundCount","setRoundCount","_useState19","_useState20","gameId","setGameId","_useState21","_useState22","cardsPlayedThisRound","setCardsPlayedThisRound","_useState23","_useState24","logs","setLogs","_useState25","_useState26","isLogExpanded","setIsLogExpanded","_useState27","_useState28","loading","setLoading","_useState29","_useState30","started","setStarted","_useState31","_useState32","error","setError","_useState33","_useState34","isDeclarationPhase","setDeclarationPhase","_useState35","_useState36","declarations","setDeclarations","_useState37","_useState38","actionValue","setActionValue","API_URL","addLog","message","prevLogs","concat","_toConsumableArray","toggleLog","handleNextTurn","isEndOneRound","endOneRound","isEndEpisode","endEpisode","isYourTurn","handleDeclarations","handlePlaySelectedCard","handleNextPlayer","handleStep","fetchLogs","_ref2","_asyncToGenerator","i","player","addDeclarationsLog","name","closedDeclaredCards","openDeclaredCards","r","move","rank","suit","largest_player","length","apply","arguments","convertToDeclarationRequest","push","requestData","post","then","response","statusCode","status","fetchGameStates","catch","console","warn","currentPlayedCard","playACard","handleShowCollectedCards","handleCloseModal","isValidMove","card","index","undefined","hand","findIndex","item","id","playedCards","splice","prevCards","data","_ref3","largestIndex","Math","floor","random","prevCount","collectedCards","startGame","_ref4","game_state","err","_x","evaluation","handleKeyPress","event","key","toLowerCase","window","addEventListener","removeEventListener","children","style","styles","tableContainer","playerContainer","topPlayer","rotation","visible","avatarNameContainer","currentPlayerWrapper","transform","rotate","source","avatar","playerName","score","title","onPress","playedCardContainer","top","leftPlayer","left","rightPlayer","right","bottomPlayer","selectable","bottom","animationType","transparent","onRequestClose","modalContainer","modalTitle","sectionTitle","keyExtractor","renderItem","_ref5","horizontal","contentContainerStyle","cardsContainer","_ref6","_ref7","known","_ref8","toString","_ref9","modalLogText","logSection","logTitle","_ref10","logText","expandButton","expandButtonText","create","flex","justifyContent","alignItems","width","position","flexDirection","height","borderRadius","marginBottom","fontSize","fontWeight","color","marginLeft","borderWidth","borderColor","backgroundColor","padding","textAlign","zIndex","maxHeight","borderTopRightRadius","borderBottomRightRadius","borderTopLeftRadius","borderBottomLeftRadius","overflow","marginTop"],"sources":["/Users/yuezhang/Documents/projects/gongzhu/GongzhuGUI/src/components/GameTable.tsx"],"sourcesContent":["// Game table component\nimport React, { useState, useEffect, useRef } from 'react';\nimport { View, Text, Button, StyleSheet, Image, Modal, FlatList, TouchableOpacity  } from 'react-native';\nimport Card from '../components/Card';\nimport {PIG, SHEEP, BLOOD, DOUBLER, SPECIAL_CARDS} from '../components/specialCards';\nimport Hand from '../components/Hand';\nimport Declaration from './Declaration';\nimport { CardInterface, PlayerInterface, DeclarationsInterface } from '../types';\nimport axios from 'axios';\nimport Constants from 'expo-constants';\n\ninterface GameTableProps {\n  initialPlayers: PlayerInterface[]; \n  online: boolean; \n  ai: String; \n  gameMode: String; \n  enable_declarations: boolean; \n};\n\nconst defaultAvatars = [\n    require('../../assets/images/avatars/You.png'),\n    require('../../assets/images/avatars/Panda.png'),\n    require('../../assets/images/avatars/Penguin.png'),\n    require('../../assets/images/avatars/Elephant.png')\n];\n\nconst GameTable: React.FC<GameTableProps> = ({ initialPlayers, online, ai = \"normal\", gameMode, enable_declarations }) => {\n    const maxRounds = 13;\n    const bottonTitle = \"Show Cards & Declaration\";\n\n    const [players, setPlayers] = useState<PlayerInterface[]>(online ? [] : initialPlayers);  \n    const [selectedPlayer, setSelectedPlayer] = useState<PlayerInterface | null>(null);\n    const [selectedCard, setSelectedCard] = useState<CardInterface | null>(null);\n    const [firstPlayerIndices, setFirstPlayerIndices] = useState<number[]>([]);\n    const [history, setHistory] = useState<CardInterface[]>([]);\n    const [firstPlayerIndex, setFirstPlayerIndex] = useState(0);\n    const [readyToLog, setReadyToLog] = useState<boolean>(false);\n    const [currentPlayerIndex, setCurrentPlayerIndex] = useState(0);\n    const [roundCount, setRoundCount] = useState(0);\n    const [gameId, setGameId] = useState<String | null> (null); \n    const [cardsPlayedThisRound, setCardsPlayedThisRound] = useState<CardInterface[]>([]);\n    const [logs, setLogs] = useState<string[]>([]);\n    const [isLogExpanded, setIsLogExpanded] = useState<boolean>(false);\n    const [loading, setLoading] = useState<boolean>(online ? true : false);\n    const [started, setStarted] = useState<boolean>(false);\n    const [error, setError] = useState<String | null>(null);\n    const [isDeclarationPhase, setDeclarationPhase] = useState<boolean>(false);\n    const [declarations, setDeclarations] = useState<DeclarationsInterface> ({\n        \"pig\" : 'no',\n        'sheep': 'no',\n        \"doubler\": 'no',\n        \"blood\": 'no'\n    });\n    const [actionValue, setActionValue] = useState<number | null>(null);\n    // If deployed, use the api from the environment variable\n    // const API_URL = Constants.expoConfig?.extra?.apiUrl;\n    const API_URL = \"http://0.0.0.0:1926\";\n    const addLog = (message: string) => {\n        setLogs(prevLogs => [message, ...prevLogs]);\n    }\n\n    const toggleLog = () => {\n        setIsLogExpanded(!isLogExpanded);\n    };\n\n    // console.log(API_URL);\n    const handleNextTurn = () => {\n        // If the game mode is set to be full, then display each turn\n        if (gameMode == \"full\") {\n            if (isEndOneRound) {\n                endOneRound();\n                return;\n            } else if (isEndEpisode) {\n                endEpisode();\n            } else if (isYourTurn) {\n                if (isDeclarationPhase) {\n                    handleDeclarations();\n                } else {\n                    handlePlaySelectedCard();\n                }\n            } else {\n                handleNextPlayer();\n            }\n        } else { // If not, only display the state when the player needs to take actions\n            if (isEndEpisode) {\n                endEpisode();\n            } else {\n                handleStep();\n            }\n        }\n    }\n\n    // Fetch the log based on history and first players\n    const fetchLogs = async () => {\n        setLogs([]);\n        // If there is a declaration phase\n        if (enable_declarations) {\n            addLog('---Declaration phase---');\n            for (let i = 0; i < 4; i++) {\n                const player = players[(i + firstPlayerIndices[0]) % 4];\n                addDeclarationsLog(player.name,\n                {\n                    \"closed_declarations\" : player.closedDeclaredCards,\n                    \"open_declarations\" : player.openDeclaredCards,\n                });\n            }\n            if (!isDeclarationPhase) {\n                addLog('---End Declaration phase---');\n            }\n        }\n        // \n        for (let r = 0; r < roundCount; r++) {\n            addLog(`---Round ${r+1}---`);\n            for (let i = 0; i < 4; i++) {\n                const player = players[(i + firstPlayerIndices[r]) % 4];\n                const move = history[r * 4 + i];\n                addLog(`Round ${r+1}: ` + `${player.name} played ${move.rank} of ${move.suit}.`);\n            }\n            const largest_player = players[firstPlayerIndices[r+1]];\n            addLog(`${largest_player.name} was the largest.`);\n            addLog(`---End Round ${r+1}---`);\n        }\n        //\n        if (!isDeclarationPhase)  {\n            addLog(`---Round ${roundCount+1}---`);\n        }\n        for (let i = 0; i < cardsPlayedThisRound.length; i++) {\n            const player = players[(i + firstPlayerIndices[roundCount]) % 4];\n            const move = history[roundCount * 4 + i];\n            addLog(`Round ${roundCount+1}: ` + `${player.name} played ${move.rank} of ${move.suit}.`);            \n        }\n        // console.log('History: ', history);\n    }\n\n    // Convert declarations to api request format\n    const convertToDeclarationRequest = () => {\n        let closedDeclaredCards: CardInterface[] = [];\n        let openDeclaredCards: CardInterface[] = [];\n        if (declarations['pig'] != 'no') {\n            if (declarations['pig'] == 'open') {\n                openDeclaredCards.push(PIG);\n            } else {\n                closedDeclaredCards.push(PIG);\n            }\n        }\n        if (declarations['sheep'] != 'no') {\n            if (declarations['sheep'] == 'open') {\n                openDeclaredCards.push(SHEEP);\n            } else {\n                closedDeclaredCards.push(SHEEP);\n            }\n        }\n        if (declarations['blood'] != 'no') {\n            if (declarations['blood'] == 'open') {\n                openDeclaredCards.push(BLOOD);\n            } else {\n                closedDeclaredCards.push(BLOOD);\n            }\n        }\n        if (declarations['doubler'] != 'no') {\n            if (declarations['doubler'] == 'open') {\n                openDeclaredCards.push(DOUBLER);\n            } else {\n                closedDeclaredCards.push(DOUBLER);\n            }\n        }\n        return {\n            'id' : gameId,\n            'closed_declarations' : closedDeclaredCards,\n            'open_declarations' : openDeclaredCards\n        }\n    }\n\n    const handleStep = () => {\n        // Logic to play the selected card. You can implement this as per the game rules.\n        if (isDeclarationPhase) {\n            const requestData = convertToDeclarationRequest(); // request\n            // console.log(requestData);\n            axios.post(API_URL + '/step', requestData).then((response) => {\n                // const data = response.data;\n                const statusCode = response.status;\n                // addDeclarationsLog(\"You\", requestData)\n                if (statusCode === 400) {\n                    addLog(\"Invalid declaration by you. Please try again.\");\n                    return;\n                }\n                // addLog(`Round ${roundCount+1}: ` + `you played ${currentPlayedCard.rank} of ${currentPlayedCard.suit}.`);\n                fetchGameStates(gameId);\n                // setCurrentPlayerIndex((currentPlayerIndex + 1) % players.length);\n            }).catch((error) => {\n                if (error.status === 400 ) {\n                    // addLog(\"Invalid move by you. Please try again.\");\n                    return;\n                }\n                console.error('Error fetching playing card: ', error);\n            });\n        }\n        if (selectedCard === null) {\n            console.warn('No card selected to play');\n            return;\n        }\n        const currentPlayedCard = selectedCard;\n        setSelectedCard(null);\n\n        if (online) {\n            const requestData = {\n                'id' : gameId,\n                'suit' : currentPlayedCard.suit,\n                'rank' : currentPlayedCard.rank,\n            }\n            axios.post(API_URL + '/step', requestData).then((response) => {\n                // const data = response.data;\n                const statusCode = response.status;\n                if (statusCode === 400) {\n                    addLog(\"Invalid move by you. Please try again.\");\n                    return;\n                }\n                // addLog(`Round ${roundCount+1}: ` + `you played ${currentPlayedCard.rank} of ${currentPlayedCard.suit}.`);\n                fetchGameStates(gameId);\n                // setCurrentPlayerIndex((currentPlayerIndex + 1) % players.length);\n            }).catch((error) => {\n                if (error.status === 400 ) {\n                    addLog(\"Invalid move by you. Please try again.\");\n                    return;\n                }\n                console.error('Error fetching playing card: ', error);\n            });\n        } else if ( playACard(players[0], currentPlayedCard) ) {\n            setCurrentPlayerIndex((currentPlayerIndex + 1) % players.length);\n        }\n    }\n    \n    const handleShowCollectedCards = (player: PlayerInterface) => {\n        setSelectedPlayer(player);\n    };\n\n    const handleCloseModal = () => {\n        setSelectedPlayer(null);\n    };\n\n    const isValidMove = (card: CardInterface) : boolean   => {  \n        // Deprecated method\n        // Now use api to determine whether a move is valid\n        return true; \n    };\n\n    const playACard = (player: PlayerInterface, card?: CardInterface) : boolean =>  {\n        // Logic to play a card from the player's hand.\n        const index = card === undefined ? 0 : player.hand.findIndex((item) => item.id === card.id);\n        card = player.hand[index];\n        // check if this card is valid\n        if (isValidMove(card)) {\n            player.currentPlayedCard = card;\n            player.playedCards.push(card);\n            player.hand.splice(index, 1);\n            setCardsPlayedThisRound(prevCards => [card, ...prevCards]);\n            // addLog(`Round ${roundCount+1}: ` + `${player.name} played ${card.rank} of ${card.suit}.`);\n            return true;\n        } else {\n            addLog(`Round ${roundCount+1}: Invalid move by ${player.name}.`);\n            return false;\n        }\n    }\n    \n    // Add declarations to logs\n    const addDeclarationsLog = (name: string | undefined, declarations) => {\n        for(const card of declarations[\"open_declarations\"]) {\n            if (card.id == PIG.id) {\n                addLog(`${name} openly declared Pig!`);\n            }\n            if (card.id == SHEEP.id) {\n                addLog(`${name} openly declared Sheep!`);\n            }\n            if (card.id == BLOOD.id) {\n                addLog(`${name} openly declared Blood!`);\n            }\n            if (card.id == DOUBLER.id) {\n                addLog(`${name} openly declared Doubler!`);\n            }\n        }\n        if (name == 'You') {\n            for(const card of declarations[\"closed_declarations\"]) {\n                if (card.id == PIG.id) {\n                    addLog(`${name} secretly declared Pig!`);\n                }\n                if (card.id == SHEEP.id) {\n                    addLog(`${name} secretly declared Sheep!`);\n                }\n                if (card.id == BLOOD.id) {\n                    addLog(`${name} secretly declared Blood!`);\n                }\n                if (card.id == DOUBLER.id) {\n                    addLog(`${name} secretly declared Doubler!`);\n                }\n            }\n        } else {\n            if (declarations[\"closed_declarations\"].length > 0) {\n                addLog(`${name} secretly declared ${declarations[\"closed_declarations\"].length} card(s)!`);\n            }\n        }\n    }\n\n    const handleNextPlayer = () => {\n        // Logic to move to the next player, for example, using a round-robin approach.\n        if (online) {\n            axios.post(API_URL + '/next_player', {'id' : gameId}).then((response) => {\n                const data = response.data;\n                const move = data.move;\n                // if (isDeclarationPhase) {\n                //     // addDeclarationsLog(players[currentPlayerIndex].name, move)\n                // } else {\n                //     // addLog(`Round ${roundCount+1}: ` + `${players[currentPlayerIndex].name} played ${move.rank} of ${move.suit}.`);\n                // }\n                fetchGameStates(gameId);\n                // setCurrentPlayerIndex((currentPlayerIndex + 1) % players.length);\n            }).catch((error) => {\n                console.error('Error fetching next player: ', error);\n            });\n        } else if (playACard(players[currentPlayerIndex])) {\n            setCurrentPlayerIndex((currentPlayerIndex + 1) % players.length);\n        }\n    };\n\n    // Play selected card\n    const handlePlaySelectedCard = () => {\n        // Logic to play the selected card. You can implement this as per the game rules.\n        if (selectedCard === null) {\n            console.warn('No card selected to play');\n            return;\n        }\n        const currentPlayedCard = selectedCard;\n        setSelectedCard(null);\n\n        if ( online) {\n            const requestData = {\n                'id' : gameId,\n                'suit' : currentPlayedCard.suit,\n                'rank' : currentPlayedCard.rank,\n            }\n            axios.post(API_URL + '/play_card', requestData).then((response) => {\n                // const data = response.data;\n                const statusCode = response.status;\n                if (statusCode === 400) {\n                    addLog(\"Invalid move by you. Please try again.\");\n                    return;\n                }\n                // addLog(`Round ${roundCount+1}: ` + `you played ${currentPlayedCard.rank} of ${currentPlayedCard.suit}.`);\n                fetchGameStates(gameId);\n                // setCurrentPlayerIndex((currentPlayerIndex + 1) % players.length);\n            }).catch((error) => {\n                if (error.status === 400 ) {\n                    addLog(\"Invalid move by you. Please try again.\");\n                    return;\n                }\n                console.error('Error fetching playing card: ', error);\n            });\n        } else if ( playACard(players[0], currentPlayedCard) ) {\n            setCurrentPlayerIndex((currentPlayerIndex + 1) % players.length);\n        }\n    };\n\n    const endOneRound = async () => {\n        try {\n            // Figure out the largest of this round based on the played cards\n            let largestIndex;\n            if (online) {\n                const response = await axios.post(API_URL + '/next_round', { 'id': gameId });\n                const data = response.data;\n                largestIndex = data.largestIndex;\n    \n                // addLog(`Round ${roundCount + 1}: ` + `${players[largestIndex].name} was largest.`);\n                await fetchGameStates(gameId); // Ensure the game state is fetched before proceeding\n            } else {\n                largestIndex = Math.floor(Math.random() * 4); // Randomly choose the largest player offline\n                // Update the round count\n                setRoundCount((prevCount) => prevCount + 1);\n            }\n\n            // Process collected cards for the largest player\n            for (let i = 0; i < players.length; i++) {\n                players[largestIndex].collectedCards.push(players[i].currentPlayedCard);\n                players[i].currentPlayedCard = null;\n            }\n    \n            // Decide the next step based on the round count\n            if (roundCount < maxRounds) { // Use `roundCount + 1` because `setRoundCount` is asynchronous\n                setCardsPlayedThisRound([]);\n                setFirstPlayerIndex(largestIndex);\n                setCurrentPlayerIndex(largestIndex);\n                // console.log(`Round ${roundCount + 1} ended.`);\n            } else {\n                setFirstPlayerIndex(-1);\n                setCurrentPlayerIndex(-1);\n            }\n        } catch (error) {\n            console.error('Error in endOneRound: ', error);\n        }\n    };\n    \n    const handleDeclarations = () => {\n        const requestData = convertToDeclarationRequest(); // request\n        // console.log(requestData);\n        axios.post(API_URL + '/make_declarations', requestData).then((response) => {\n            // const data = response.data;\n            const statusCode = response.status;\n            addDeclarationsLog(\"You\", requestData)\n            if (statusCode === 400) {\n                addLog(\"Invalid declaration by you. Please try again.\");\n                return;\n            }\n            // addLog(`Round ${roundCount+1}: ` + `you played ${currentPlayedCard.rank} of ${currentPlayedCard.suit}.`);\n            fetchGameStates(gameId);\n            // setCurrentPlayerIndex((currentPlayerIndex + 1) % players.length);\n        }).catch((error) => {\n            if (error.status === 400 ) {\n                addLog(\"Invalid move by you. Please try again.\");\n                return;\n            }\n            console.error('Error fetching playing card: ', error);\n        });\n    }\n    \n    const startGame = () => {\n        axios.post(API_URL + '/start_game', {\"ai\": ai, \"auto\": gameMode != 'full', \"declaration\": enable_declarations})\n            .then(response => {\n                // console.log(response.data);\n                fetchGameStates(response.data.id);\n                setDeclarations({\n                    \"pig\" : 'no',\n                    'sheep': 'no',\n                    \"doubler\": 'no',\n                    \"blood\": 'no'\n                })\n            })\n            .catch(error => {\n                console.error(\"There was an error starting the game!\", error);\n            });\n    }\n\n    const endEpisode = () => {\n        // console.log('Episode ended. New Game started.');\n        startGame();\n    }\n\n    const fetchGameStates = async (id: String | null) => {\n        // if (loading) {\n        //     return; // Return early if already loading\n        // }\n        try {\n            setLoading(true); // Start loading\n            const response = await axios.post(API_URL + '/get_game_state', {'id' : id});\n            const game_state = response.data.game_state;\n            setPlayers(game_state.players); // Update state with player data\n            setFirstPlayerIndex(game_state.firstPlayerIndex); // Update state with the index of the first player\n            setRoundCount(game_state.roundCount); // Update state with the current round count\n            setCurrentPlayerIndex(game_state.currentPlayerIndex); // Update state with the index of the current player\n            setCardsPlayedThisRound(game_state.cardsPlayedThisRound); // Update state with the cards played this round\n            setDeclarationPhase(game_state.isDeclarationPhase); // Set the declaration\n            setGameId(id);\n            setFirstPlayerIndices(game_state.firstPlayerIndices);\n            // setHistory(game_state.history);\n            setHistory([...game_state.history]); \n            setReadyToLog(true);\n        } catch (err) {\n            console.error(\"Failed to fetch game states:\", err);\n            setError(\"Failed to load player data.\");\n        } finally {\n            setLoading(false); \n            setStarted(true); // Game started\n            // fetchLogs();\n        }\n    };\n\n    if (online) {\n        useEffect(() => {\n            startGame();\n        }, []); \n    }\n\n    let isEndOneRound = false; \n    // Check if every player has played some card\n    if (players.length > 0) {\n        isEndOneRound = players[0].currentPlayedCard != null &&\n        players[1].currentPlayedCard != null &&\n        players[2].currentPlayedCard != null &&\n        players[3].currentPlayedCard != null;\n    } \n    // const isEndOneRound = false;\n    const isEndEpisode = (roundCount === maxRounds && !isEndOneRound);\n    const isYourTurn = (currentPlayerIndex === 0); // Assuming player 0 is at the bottom\n    if (isEndOneRound && currentPlayerIndex != -1) {\n        setCurrentPlayerIndex(-1);\n        // console.log('End of one round');\n    }\n\n    // const isFetching = useRef(false);\n\n    useEffect(() => {\n        if (readyToLog) {\n            fetchLogs();\n            setReadyToLog(false);\n        }\n    }, [readyToLog]); \n\n    // Update esimated action value\n    useEffect(() => {\n        if (selectedCard == null) {\n            setActionValue(null)\n        } else {\n            // Request estimated action value\n            const requestData = {\n                'id' : gameId,\n                'suit' : selectedCard.suit,\n                'rank' : selectedCard.rank,\n            }\n            axios.post(API_URL + '/evaluate', requestData).then((response) => {\n                const statusCode = response.status;\n                if (statusCode === 400) {\n                    // addLog(\"Invalid move by you. Please try again.\");\n                    return;\n                }\n                const data = response.data;\n                const evaluation = data.evaluation;\n                setActionValue(evaluation);\n                // addLog(`Round ${roundCount+1}: ` + `you played ${currentPlayedCard.rank} of ${currentPlayedCard.suit}.`);\n                // fetchGameStates(gameId);\n                // setCurrentPlayerIndex((currentPlayerIndex + 1) % players.length);\n            }).catch((error) => {\n                // if (error.status === 400 ) {\n                //     addLog(\"Invalid move by you. Please try again.\");\n                //     return;\n                // }\n                // console.error('Error fetching playing card: ', error);\n            });            \n        }\n    }, [selectedCard]);\n    \n\n    // Add hotkey for the center button\n    useEffect(() => {\n        const handleKeyPress = (event: KeyboardEvent) => {\n            if (event.key.toLowerCase() === 'n') {\n                handleNextTurn(); // Trigger the button action when 'N' is pressed\n            }\n        };\n\n        window.addEventListener('keydown', handleKeyPress);\n        return () => {\n            window.removeEventListener('keydown', handleKeyPress);\n        };\n    }, [players, selectedCard, currentPlayerIndex]);\n\n    if (!started) {\n        return (\n            <Text>Loading Game...</Text>\n        );\n    }\n    return (\n    <View style={styles.tableContainer}>\n        {/* Top Player */}\n        <View style={[styles.playerContainer, styles.topPlayer]}>\n            <Hand hand={players[2].hand} rotation={0} visible={false} />\n            <View style={[styles.avatarNameContainer, \n            currentPlayerIndex===2 && styles.currentPlayerWrapper, { transform: [{ rotate: '180deg' }, \n                ] }]}>\n            <Image source={players[2].avatar ? players[2].avatar : defaultAvatars[2]} style={styles.avatar} />\n            <Text style={styles.playerName}>{players[2].name}</Text>\n            <Text style={styles.playerName}>Score : {players[2].score}</Text>\n            <Button\n                title={bottonTitle}\n                onPress={() => handleShowCollectedCards(players[2])}\n            />\n            </View>\n        </View>\n        {/* Played card of Top Player */}\n        <View style={[styles.playedCardContainer, { top: 180 }]}>\n            {players[2].currentPlayedCard != null && (\n            <Card card={players[2].currentPlayedCard} rotation={180} />\n        )}\n        </View>\n        {/* Left Player */}\n        <View style={[styles.playerContainer, styles.leftPlayer]}>\n            <View style={[styles.avatarNameContainer,\n            currentPlayerIndex===3 && styles.currentPlayerWrapper]}>\n                <Image source={players[3].avatar ? players[3].avatar : defaultAvatars[3]} style={styles.avatar} />\n                <Text style={styles.playerName}>{players[3].name}</Text>\n                <Text style={styles.playerName}>Score : {players[3].score}</Text>\n            </View>\n            <Button\n            title={bottonTitle}\n            onPress={() => handleShowCollectedCards(players[3])}\n            />\n            <Hand hand={players[3].hand} rotation={0} visible={false} />\n        </View>\n        {/* Played card of Left Player */}\n        <View style={[styles.playedCardContainer, { left: 450 }]}>\n            {players[3].currentPlayedCard != null && (\n            <Card card={players[3].currentPlayedCard} rotation={180} />\n        )}\n        </View>\n        {/* Right Player */}\n        <View style={[styles.playerContainer, styles.rightPlayer]}>\n            <View style={[styles.avatarNameContainer, \n            currentPlayerIndex===1 && styles.currentPlayerWrapper]}>\n                <Image source={players[1].avatar ? players[1].avatar : defaultAvatars[1]} style={styles.avatar} />\n                <Text style={styles.playerName}>{players[1].name}</Text>\n                <Text style={styles.playerName}>Score : {players[1].score}</Text>\n            </View>\n            <Button\n            title={bottonTitle}\n            onPress={() => handleShowCollectedCards(players[1])}\n            />\n            <Hand hand={players[1].hand} rotation={0} visible={false} />\n        </View>\n\n        {/* Played card of Right Player */}\n        <View style={[styles.playedCardContainer, { right: 450 }]}>\n            {players[1].currentPlayedCard != null && (\n            <Card card={players[1].currentPlayedCard} rotation={180} />\n        )}\n        </View>\n        {/* Bottom Player */}\n        <View style={[styles.playerContainer, styles.bottomPlayer]}>\n            <Hand hand={players[0].hand} rotation={0} visible={true} \n                selectable={isYourTurn && !isDeclarationPhase}\n                selectedCard={isYourTurn ? selectedCard : null}\n                setSelectedCard={setSelectedCard}/>\n            <View style={[styles.avatarNameContainer, \n                currentPlayerIndex===0 && styles.currentPlayerWrapper,]} >\n                \n                <Image source={players[0].avatar ? players[0].avatar : defaultAvatars[0]} style={styles.avatar} />\n                <Text style={styles.playerName}>{players[0].name}</Text>\n                <Text style={styles.playerName}>Score : {players[0].score}</Text>\n                <Button\n                    title={bottonTitle}\n                    onPress={() => handleShowCollectedCards(players[0])}\n                />\n            </View>\n        </View>\n        {/* Played card of Bottom Player */}\n        <View style={[styles.playedCardContainer, { bottom: 180 }]}>\n            {players[0].currentPlayedCard != null && (\n            <Card card={players[0].currentPlayedCard} rotation={180} />\n        )}\n\n        {/* Modal for Collected Cards */}\n        </View>\n        {selectedPlayer && (\n            <Modal\n            visible={true}\n            animationType=\"none\"\n            transparent={true}\n            onRequestClose={handleCloseModal}\n            >\n            <View style={styles.modalContainer}>\n                <Text style={styles.modalTitle}>\n                {selectedPlayer.name}'s Cards & Declaration\n                </Text>\n                {/* Collected Cards */}\n                <Text style={styles.sectionTitle}>Collected Cards:</Text>\n                <FlatList\n                data={selectedPlayer.collectedCards}\n                keyExtractor={(item) => item.id}\n                renderItem={({ item }) => (\n                    <Card card={item} />\n                )}\n                horizontal={true}\n                contentContainerStyle={styles.cardsContainer}\n                />\n                {/* Played Cards */}\n                <Text style={styles.sectionTitle}>Played Cards:</Text>\n                <FlatList\n                data={selectedPlayer.playedCards}\n                keyExtractor={(item) => item.id}\n                renderItem={({ item }) => (\n                    <Card card={item} />\n                )}\n                horizontal={true}\n                contentContainerStyle={styles.cardsContainer}\n                />\n\n                {/* Declared Cards */}\n                <Text style={styles.sectionTitle}>Close Declared Cards:</Text>\n                <FlatList\n                data={selectedPlayer.closedDeclaredCards}\n                keyExtractor={(item) => item.id}\n                renderItem={({ item }) => (\n                    <Card card={item} visible={item.known}/>\n                )}\n                horizontal={true}\n                contentContainerStyle={styles.cardsContainer}\n                />\n                <Text style={styles.sectionTitle}>Open Declared Cards:</Text>\n                <FlatList\n                data={selectedPlayer.openDeclaredCards}\n                keyExtractor={(item) => item.id}\n                renderItem={({ item }) => (\n                    <Card card={item} />\n                )}\n                horizontal={true}\n                contentContainerStyle={styles.cardsContainer}\n                />\n\n\n                <Button title=\"Close\" onPress={handleCloseModal} />\n            </View>\n            </Modal>\n        )}\n\n        {/* Modal for Full Log */}\n        <Modal\n            visible={isLogExpanded}\n            animationType=\"none\"\n            transparent={true}\n            onRequestClose={toggleLog}\n        >\n            <View style={styles.modalContainer}>\n            <Text style={styles.modalTitle}>Full Log</Text>\n            <FlatList\n                data={logs}\n                keyExtractor={(item, index) => index.toString()}\n                renderItem={({ item }) => <Text style={styles.modalLogText}>{item}</Text>}\n            />\n            <Button title=\"Close\" onPress={toggleLog} />\n            </View>\n        </Modal>\n\n        {/* Conditional Button */}\n            <Text style={styles.playerName}>Estimated Action Value : {actionValue}</Text>\n            {loading?\n             <Text>Loading...</Text> : \n             isEndEpisode? \n                <Button title=\"New Game (n)\" onPress={handleNextTurn} /> : \n            isEndOneRound ? \n                <Button title=\"End this Round (n)\" onPress={handleNextTurn} /> : \n            (isYourTurn ? ( isDeclarationPhase ? \n                <View>\n                    <Declaration \n                        hand={players[0].hand} \n                        declarations={declarations}\n                        setDeclarations={setDeclarations}\n                    />\n                    <Button title=\"Finish Declaration (n)\" onPress={handleNextTurn} />\n                </View> :\n                <Button title=\"Play Selected Card (n)\" onPress={handleNextTurn} /> \n            ):\n                <Button title=\"Next (n)\" onPress={handleNextTurn} />\n            )}\n\n        {/* Log Section */}\n        <View style={styles.logSection}>\n            <Text style={styles.logTitle}>Logs:</Text>\n            <FlatList\n            data={logs}\n            keyExtractor={(item, index) => index.toString()}\n            renderItem={({ item }) => <Text style={styles.logText}>{item}</Text>}\n            />\n            <TouchableOpacity style={styles.expandButton} onPress={toggleLog}>\n                <Text style={styles.expandButtonText}>Expand</Text>\n            </TouchableOpacity>\n        </View>\n\n    </View>\n        \n    );\n};\n\nconst styles = StyleSheet.create({\n  tableContainer: {\n    flex: 1,\n    justifyContent: 'center',\n    alignItems: 'center',\n    width: '100%',\n  },\n  playerContainer: {\n    position: 'absolute',\n    alignItems: 'center',\n  },\n  topPlayer: {\n    top: 20,\n    flexDirection: 'row',\n    transform: [{ rotate: '180deg' }],\n  },\n  bottomPlayer: {\n    bottom: 20,\n    flexDirection: 'row',\n    alignItems: 'center',\n  },\n  leftPlayer: {\n    left: 20,\n    justifyContent: 'center',\n    transform: [{ rotate: '90deg' }],\n  },\n  rightPlayer: {\n    right: 20,\n    justifyContent: 'center',\n    transform: [{ rotate: '-90deg' }],\n  },\n  avatar: {\n    width: 50,\n    height: 50,\n    borderRadius: 25,\n    marginBottom: 5,\n  },\n  playerName: {\n    fontSize: 16,\n    fontWeight: 'bold',\n    color: '#222222',\n    marginBottom: 5,\n  },\n  avatarNameContainer: {\n    marginLeft: 10,\n    alignItems: 'center',\n  },\n  currentPlayerWrapper: {\n    borderWidth: 5,\n    borderColor: '#FFD700', \n    borderRadius: -5,\n  },\n  modalContainer: {\n    flex: 1,\n    justifyContent: 'center',\n    backgroundColor: 'rgba(0, 0, 0, 0.8)',\n    padding: 20,\n  },\n  modalTitle: {\n    fontSize: 18,\n    fontWeight: 'bold',\n    color: '#fff',\n    textAlign: 'center',\n    marginBottom: 10,\n  },\n  cardsContainer: {\n    flexDirection: 'row',\n    justifyContent: 'center',\n    marginBottom: 2,\n  },\n  sectionTitle: {\n    fontSize: 16,\n    fontWeight: 'bold',\n    color: '#FFD700',\n  },\n  playedCardContainer: {\n    position: 'absolute',\n    zIndex: 2,\n  },\n  logSection: {\n    position: 'absolute',\n    bottom: 0,\n    left: 0,\n    width: '23%', \n    maxHeight: '14%', \n    backgroundColor: '#222',\n    padding: 10,\n    borderTopRightRadius: 10,\n    borderBottomRightRadius: 0,\n    borderTopLeftRadius: 0,\n    borderBottomLeftRadius: 10,\n    overflow: 'hidden',\n  },\n  logTitle: {\n    color: '#fff',\n    fontSize: 16,\n    fontWeight: 'bold',\n    marginBottom: 5,\n  },\n  logText: {\n    color: '#ccc',\n    fontSize: 14,\n  },\n  modalLogText: {\n    color: '#fff',\n    fontSize: 14,\n    marginBottom: 5,\n  },\n  expandButton: {\n    marginTop: 10,\n    padding: 5,\n    backgroundColor: '#444',\n    alignItems: 'center',\n    borderRadius: 5,\n  },\n  expandButtonText: {\n    color: '#fff',\n    fontSize: 14,\n  },\n});\n  \n\nexport default GameTable;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}