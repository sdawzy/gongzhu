{"ast":null,"code":"\"use strict\";import*as React from'react';import{NavigationBuilderContext}from\"./NavigationBuilderContext.js\";import{useIsomorphicLayoutEffect}from'./useIsomorphicLayoutEffect';export function useScheduleUpdate(callback){var _React$useContext=React.useContext(NavigationBuilderContext),scheduleUpdate=_React$useContext.scheduleUpdate,flushUpdates=_React$useContext.flushUpdates;scheduleUpdate(callback);useIsomorphicLayoutEffect(flushUpdates);}","map":{"version":3,"names":["React","NavigationBuilderContext","useIsomorphicLayoutEffect","useScheduleUpdate","callback","_React$useContext","useContext","scheduleUpdate","flushUpdates"],"sources":["/Users/yuezhang/Documents/projects/gongzhu/GongzhuGUI/node_modules/@react-navigation/core/src/useScheduleUpdate.tsx"],"sourcesContent":["import * as React from 'react';\n\nimport { NavigationBuilderContext } from './NavigationBuilderContext';\nimport { useIsomorphicLayoutEffect } from './useIsomorphicLayoutEffect';\n\n/**\n * When screen config changes, we want to update the navigator in the same update phase.\n * However, navigation state is in the root component and React won't let us update it from a child.\n * This is a workaround for that, the scheduled update is stored in the ref without actually calling setState.\n * It lets all subsequent updates access the latest state so it stays correct.\n * Then we call setState during after the component updates.\n */\nexport function useScheduleUpdate(callback: () => void) {\n  const { scheduleUpdate, flushUpdates } = React.useContext(\n    NavigationBuilderContext\n  );\n\n  // FIXME: This is potentially unsafe\n  // However, since we are using sync store, it might be fine\n  scheduleUpdate(callback);\n\n  useIsomorphicLayoutEffect(flushUpdates);\n}\n"],"mappings":"aAAA,MAAO,GAAK,CAAAA,KAAK,KAAM,OAAO,CAE9B,OAASC,wBAAwB,KAAQ,+BAA4B,CACrE,OAASC,yBAAyB,KAAQ,6BAA6B,CASvE,MAAO,SAAS,CAAAC,iBAAiBA,CAACC,QAAoB,CAAE,CACtD,IAAAC,iBAAA,CAAyCL,KAAK,CAACM,UAAU,CACvDL,wBACF,CAAC,CAFOM,cAAc,CAAAF,iBAAA,CAAdE,cAAc,CAAEC,YAAA,CAAAH,iBAAA,CAAAG,YAAA,CAMxBD,cAAc,CAACH,QAAQ,CAAC,CAExBF,yBAAyB,CAACM,YAAY,CAAC,CACzC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}