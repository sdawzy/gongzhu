{"ast":null,"code":"\"use strict\";import _defineProperty from\"@babel/runtime/helpers/defineProperty\";import _objectWithoutProperties from\"@babel/runtime/helpers/objectWithoutProperties\";var _excluded=[\"linking\"];function ownKeys(e,r){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);r&&(o=o.filter(function(r){return Object.getOwnPropertyDescriptor(e,r).enumerable;})),t.push.apply(t,o);}return t;}function _objectSpread(e){for(var r=1;r<arguments.length;r++){var t=null!=arguments[r]?arguments[r]:{};r%2?ownKeys(Object(t),!0).forEach(function(r){_defineProperty(e,r,t[r]);}):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):ownKeys(Object(t)).forEach(function(r){Object.defineProperty(e,r,Object.getOwnPropertyDescriptor(t,r));});}return e;}import{createComponentForStaticNavigation,createPathConfigForStaticNavigation}from'@react-navigation/core';import*as React from'react';import{NavigationContainer}from\"./NavigationContainer.js\";import{jsx as _jsx}from\"react/jsx-runtime\";export function createStaticNavigation(tree){var Component=createComponentForStaticNavigation(tree,'RootNavigator');function Navigation(_ref,ref){var _linking$config4,_linking$config5;var linking=_ref.linking,rest=_objectWithoutProperties(_ref,_excluded);var linkingConfig=React.useMemo(function(){var _linking$config,_linking$config2,_linking$config3;var screens=createPathConfigForStaticNavigation(tree,{initialRouteName:linking==null?void 0:(_linking$config=linking.config)==null?void 0:_linking$config.initialRouteName},(linking==null?void 0:linking.enabled)==='auto');if(!screens)return;return{path:linking==null?void 0:(_linking$config2=linking.config)==null?void 0:_linking$config2.path,initialRouteName:linking==null?void 0:(_linking$config3=linking.config)==null?void 0:_linking$config3.initialRouteName,screens:screens};},[linking==null?void 0:linking.enabled,linking==null?void 0:(_linking$config4=linking.config)==null?void 0:_linking$config4.path,linking==null?void 0:(_linking$config5=linking.config)==null?void 0:_linking$config5.initialRouteName]);var memoizedLinking=React.useMemo(function(){if(!linking){return undefined;}var enabled=typeof linking.enabled==='boolean'?linking.enabled:(linkingConfig==null?void 0:linkingConfig.screens)!=null;return _objectSpread(_objectSpread({},linking),{},{enabled:enabled,config:linkingConfig});},[linking,linkingConfig]);if((linking==null?void 0:linking.enabled)===true&&(linkingConfig==null?void 0:linkingConfig.screens)==null){throw new Error('Linking is enabled but no linking configuration was found for the screens.\\n\\n'+'To solve this:\\n'+\"- Specify a 'linking' property for the screens you want to link to.\\n\"+\"- Or set 'linking.enabled' to 'auto' to generate paths automatically.\\n\\n\"+'See usage guide: https://reactnavigation.org/docs/static-configuration#linking');}return _jsx(NavigationContainer,_objectSpread(_objectSpread({},rest),{},{ref:ref,linking:memoizedLinking,children:_jsx(Component,{})}));}return React.forwardRef(Navigation);}","map":{"version":3,"names":["createComponentForStaticNavigation","createPathConfigForStaticNavigation","React","NavigationContainer","jsx","_jsx","createStaticNavigation","tree","Component","Navigation","_ref","ref","_linking$config4","_linking$config5","linking","rest","_objectWithoutProperties","_excluded","linkingConfig","useMemo","_linking$config","_linking$config2","_linking$config3","screens","initialRouteName","config","enabled","path","memoizedLinking","undefined","_objectSpread","Error","children","forwardRef"],"sources":["/Users/yuezhang/Documents/projects/gongzhu/GongzhuGUI/node_modules/@react-navigation/native/src/createStaticNavigation.tsx"],"sourcesContent":["import {\n  createComponentForStaticNavigation,\n  createPathConfigForStaticNavigation,\n  type NavigationContainerRef,\n  type ParamListBase,\n  type StaticNavigation,\n} from '@react-navigation/core';\nimport * as React from 'react';\n\nimport { NavigationContainer } from './NavigationContainer';\nimport type { LinkingOptions } from './types';\n\ntype Props = Omit<\n  React.ComponentProps<typeof NavigationContainer>,\n  'linking' | 'children'\n> & {\n  /**\n   * Options for deep linking.\n   */\n  linking?: Omit<LinkingOptions<ParamListBase>, 'config' | 'enabled'> & {\n    /**\n     * Whether deep link handling should be enabled.\n     * Defaults to `true` if any `linking` options are specified, `false` otherwise.\n     *\n     * When 'auto' is specified, all leaf screens will get a autogenerated path.\n     * The generated path will be a kebab-case version of the screen name.\n     * This can be overridden for specific screens by specifying `linking` for the screen.\n     */\n    enabled?: 'auto' | true | false;\n    /**\n     * Additional configuration\n     */\n    config?: Omit<\n      NonNullable<LinkingOptions<ParamListBase>['config']>,\n      'screens'\n    >;\n  };\n};\n\n/**\n * Create a navigation component from a static navigation config.\n * The returned component is a wrapper around `NavigationContainer`.\n *\n * @param tree Static navigation config.\n * @returns Navigation component to use in your app.\n */\nexport function createStaticNavigation(tree: StaticNavigation<any, any, any>) {\n  const Component = createComponentForStaticNavigation(tree, 'RootNavigator');\n\n  function Navigation(\n    { linking, ...rest }: Props,\n    ref: React.Ref<NavigationContainerRef<ParamListBase>>\n  ) {\n    const linkingConfig = React.useMemo(() => {\n      const screens = createPathConfigForStaticNavigation(\n        tree,\n        { initialRouteName: linking?.config?.initialRouteName },\n        linking?.enabled === 'auto'\n      );\n\n      if (!screens) return;\n\n      return {\n        path: linking?.config?.path,\n        initialRouteName: linking?.config?.initialRouteName,\n        screens,\n      };\n    }, [\n      linking?.enabled,\n      linking?.config?.path,\n      linking?.config?.initialRouteName,\n    ]);\n\n    const memoizedLinking = React.useMemo(() => {\n      if (!linking) {\n        return undefined;\n      }\n\n      const enabled =\n        typeof linking.enabled === 'boolean'\n          ? linking.enabled\n          : linkingConfig?.screens != null;\n\n      return {\n        ...linking,\n        enabled,\n        config: linkingConfig,\n      };\n    }, [linking, linkingConfig]);\n\n    if (linking?.enabled === true && linkingConfig?.screens == null) {\n      throw new Error(\n        'Linking is enabled but no linking configuration was found for the screens.\\n\\n' +\n          'To solve this:\\n' +\n          \"- Specify a 'linking' property for the screens you want to link to.\\n\" +\n          \"- Or set 'linking.enabled' to 'auto' to generate paths automatically.\\n\\n\" +\n          'See usage guide: https://reactnavigation.org/docs/static-configuration#linking'\n      );\n    }\n\n    return (\n      <NavigationContainer {...rest} ref={ref} linking={memoizedLinking}>\n        <Component />\n      </NavigationContainer>\n    );\n  }\n\n  return React.forwardRef(Navigation);\n}\n"],"mappings":"2yBAAA,OACEA,kCAAkC,CAClCC,mCAAmC,KAI9B,wBAAwB,CAC/B,MAAO,GAAK,CAAAC,KAAK,KAAM,OAAO,CAE9B,OAASC,mBAAmB,KAAQ,0BAAuB,CAAC,OAAAC,GAAA,IAAAC,IAAA,yBAqC5D,MAAO,SAAS,CAAAC,sBAAsBA,CAACC,IAAqC,CAAE,CAC5E,GAAM,CAAAC,SAAS,CAAGR,kCAAkC,CAACO,IAAI,CAAE,eAAe,CAAC,CAE3E,QAAS,CAAAE,UAAUA,CAAAC,IAAA,CAEjBC,GAAqD,CACrD,KAAAC,gBAAA,CAAAC,gBAAA,IAFE,CAAAC,OAAO,CAAAJ,IAAA,CAAPI,OAAO,CAAKC,IAAA,CAAAC,wBAAA,CAAAN,IAAA,CAAAO,SAAA,EAGd,GAAM,CAAAC,aAAa,CAAGhB,KAAK,CAACiB,OAAO,CAAC,UAAM,KAAAC,eAAA,CAAAC,gBAAA,CAAAC,gBAAA,CACxC,GAAM,CAAAC,OAAO,CAAGtB,mCAAmC,CACjDM,IAAI,CACJ,CAAEiB,gBAAgB,CAAEV,OAAO,eAAAM,eAAA,CAAPN,OAAO,CAAEW,MAAM,eAAfL,eAAA,CAAiBI,gBAAiB,CAAC,CACvD,CAAAV,OAAO,cAAPA,OAAO,CAAEY,OAAO,IAAK,MACvB,CAAC,CAED,GAAI,CAACH,OAAO,CAAE,OAEd,MAAO,CACLI,IAAI,CAAEb,OAAO,eAAAO,gBAAA,CAAPP,OAAO,CAAEW,MAAM,eAAfJ,gBAAA,CAAiBM,IAAI,CAC3BH,gBAAgB,CAAEV,OAAO,eAAAQ,gBAAA,CAAPR,OAAO,CAAEW,MAAM,eAAfH,gBAAA,CAAiBE,gBAAgB,CACnDD,OAAA,CAAAA,OACF,CAAC,CACH,CAAC,CAAE,CACDT,OAAO,cAAPA,OAAO,CAAEY,OAAO,CAChBZ,OAAO,eAAAF,gBAAA,CAAPE,OAAO,CAAEW,MAAM,eAAfb,gBAAA,CAAiBe,IAAI,CACrBb,OAAO,eAAAD,gBAAA,CAAPC,OAAO,CAAEW,MAAM,eAAfZ,gBAAA,CAAiBW,gBAAgB,CAClC,CAAC,CAEF,GAAM,CAAAI,eAAe,CAAG1B,KAAK,CAACiB,OAAO,CAAC,UAAM,CAC1C,GAAI,CAACL,OAAO,CAAE,CACZ,MAAO,CAAAe,SAAS,CAClB,CAEA,GAAM,CAAAH,OAAO,CACX,MAAO,CAAAZ,OAAO,CAACY,OAAO,GAAK,SAAS,CAChCZ,OAAO,CAACY,OAAO,CACf,CAAAR,aAAa,cAAbA,aAAa,CAAEK,OAAO,GAAI,IAAI,CAEpC,OAAAO,aAAA,CAAAA,aAAA,IACKhB,OAAO,MACVY,OAAO,CAAPA,OAAO,CACPD,MAAM,CAAEP,aAAA,GAEZ,CAAC,CAAE,CAACJ,OAAO,CAAEI,aAAa,CAAC,CAAC,CAE5B,GAAI,CAAAJ,OAAO,cAAPA,OAAO,CAAEY,OAAO,IAAK,IAAI,EAAI,CAAAR,aAAa,cAAbA,aAAa,CAAEK,OAAO,GAAI,IAAI,CAAE,CAC/D,KAAM,IAAI,CAAAQ,KAAK,CACb,gFAAgF,CAC9E,kBAAkB,CAClB,uEAAuE,CACvE,2EAA2E,CAC3E,gFACJ,CAAC,CACH,CAEA,MACE,CAAA1B,IAAA,CAACF,mBAAmB,CAAA2B,aAAA,CAAAA,aAAA,IAAKf,IAAI,MAAEJ,GAAG,CAAEA,GAAI,CAACG,OAAO,CAAEc,eAAgB,CAAAI,QAAA,CAChE3B,IAAA,CAACG,SAAS,GAAE,GACO,CAAC,CAE1B,CAEA,MAAO,CAAAN,KAAK,CAAC+B,UAAU,CAACxB,UAAU,CAAC,CACrC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}