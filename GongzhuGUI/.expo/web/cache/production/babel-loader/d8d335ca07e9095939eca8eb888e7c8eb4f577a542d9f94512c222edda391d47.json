{"ast":null,"code":"import _slicedToArray from\"@babel/runtime/helpers/slicedToArray\";import React,{useState}from'react';import View from\"react-native-web/dist/exports/View\";import StyleSheet from\"react-native-web/dist/exports/StyleSheet\";import FlatList from\"react-native-web/dist/exports/FlatList\";import TouchableOpacity from\"react-native-web/dist/exports/TouchableOpacity\";import Card from'./Card';import{jsx as _jsx}from\"react/jsx-runtime\";var Hand=function Hand(_ref){var hand=_ref.hand,rotation=_ref.rotation,visible=_ref.visible,spacing=_ref.spacing,selectable=_ref.selectable,selectedCard=_ref.selectedCard,setSelectedCard=_ref.setSelectedCard;if(rotation===undefined){rotation=0;}if(visible===undefined){visible=true;}if(spacing===undefined){spacing=30;}if(selectable===undefined){selectable=true;}var cardBack=require('../../assets/images/cards/card_back.png');if(selectedCard===undefined){var _useState=useState(null);var _useState2=_slicedToArray(_useState,2);selectedCard=_useState2[0];setSelectedCard=_useState2[1];}var numberOfCards=hand.length;var handleCardPress=function handleCardPress(card){setSelectedCard(card);};if(visible===true&&selectable){return _jsx(View,{style:[styles.handContainer,{width:(numberOfCards-1)*spacing+120}],children:_jsx(FlatList,{horizontal:true,data:hand,keyExtractor:function keyExtractor(item){return item.id;},renderItem:function renderItem(_ref2){var item=_ref2.item,index=_ref2.index;return _jsx(TouchableOpacity,{onPress:function onPress(){return handleCardPress(item);},children:_jsx(View,{style:[styles.cardWrapper,selectedCard==item&&styles.selectedCardWrapper,{left:index*spacing}],children:_jsx(Card,{card:item,visible:visible})})});},contentContainerStyle:[styles.listContent,{width:(numberOfCards-1)*spacing+100}],style:{transform:[{rotate:`${rotation}deg`}]}})});}else{return _jsx(View,{style:[styles.handContainer,{width:(numberOfCards-1)*spacing+100}],children:_jsx(FlatList,{horizontal:true,data:hand,keyExtractor:function keyExtractor(item){return item.id;},renderItem:function renderItem(_ref3){var item=_ref3.item,index=_ref3.index;return _jsx(View,{style:[styles.cardWrapper,{left:index*spacing}],children:_jsx(Card,{card:item,visible:visible})});},contentContainerStyle:[styles.listContent,{width:(numberOfCards-1)*spacing+100}],style:{transform:[{rotate:`${rotation}deg`}]}})});}};var styles=StyleSheet.create({handContainer:{height:170,position:'relative',overflow:'hidden',justifyContent:'flex-end',width:500},title:{fontSize:20,fontWeight:'bold',marginBottom:16,textAlign:'center'},cardWrapper:{position:'absolute',zIndex:1,transform:[{translateY:-140}]},listContent:{height:'100%',flexDirection:'row',alignItems:'flex-end',paddingBottom:10},selectedCardWrapper:{borderWidth:5,borderColor:'#FFD700',borderRadius:-5,zIndex:2,transform:[{translateY:-160}]}});export default Hand;","map":{"version":3,"names":["React","useState","View","StyleSheet","FlatList","TouchableOpacity","Card","jsx","_jsx","Hand","_ref","hand","rotation","visible","spacing","selectable","selectedCard","setSelectedCard","undefined","cardBack","require","_useState","_useState2","_slicedToArray","numberOfCards","length","handleCardPress","card","style","styles","handContainer","width","children","horizontal","data","keyExtractor","item","id","renderItem","_ref2","index","onPress","cardWrapper","selectedCardWrapper","left","contentContainerStyle","listContent","transform","rotate","_ref3","create","height","position","overflow","justifyContent","title","fontSize","fontWeight","marginBottom","textAlign","zIndex","translateY","flexDirection","alignItems","paddingBottom","borderWidth","borderColor","borderRadius"],"sources":["/Users/yuezhang/Documents/projects/gongzhu/GongzhuGUI/src/components/Hand.tsx"],"sourcesContent":["// Hand UI\nimport React, {useState} from 'react';\nimport { View, Text, StyleSheet, FlatList, TouchableOpacity } from 'react-native';\nimport Card from './Card';\nimport { CardInterface } from '../types';\n\nconst Hand: React.FC< {\n    hand: CardInterface[], // List of cards in the hand\n    rotation?: number,  // Optional rotation angle\n    visible?: boolean,  // Optional visibility state\n    spacing?: number, // Optional spacing\n    selectable?: boolean, // Optional selectable\n    selectedCard?: CardInterface | null,  // Optional selected card ID\n    setSelectedCard?: Function,  // Optional callback function to update selected card state\n  }> = ({ hand, rotation, visible, spacing, selectable, selectedCard, setSelectedCard }) => {\n    if (rotation === undefined) { \n      rotation = 0;  // Default rotation is 0 degrees if not provided\n    }\n    if (visible === undefined) { \n      visible = true;  // Default visibility is true if not provided\n    }\n    if (spacing === undefined) { \n      spacing = 30;  // Default spacing is 10 pixels if not provided\n    }\n    if (selectable === undefined) { \n      selectable = true;  // Default selectable is true if not provided\n    }\n\n    const cardBack = require('../../assets/images/cards/card_back.png');\n    if (selectedCard === undefined) { \n      // console.warn('No selectedCard provided, using first card in hand');\n      [selectedCard, setSelectedCard] = useState<CardInterface | null>(null);\n    }\n    const numberOfCards = hand.length;\n    const handleCardPress = (card: CardInterface) => {\n        setSelectedCard(card);\n    };\n\n    if (visible === true && selectable) {\n      return (\n          <View style={[styles.handContainer, {width: (numberOfCards-1) * spacing + 120}]}>    \n              <FlatList horizontal={true}\n              data={hand}\n              keyExtractor={(item) => item.id}\n              renderItem={({ item, index }) => (\n                  <TouchableOpacity onPress={() => handleCardPress(item)}>\n                      <View style={[styles.cardWrapper, \n                      selectedCard == item && styles.selectedCardWrapper,\n                      {left: index * spacing,}]}>\n                          <Card \n                              card={item}\n                              visible={visible}\n                          />\n                      </View>\n                  </TouchableOpacity>\n              )}\n              contentContainerStyle={[styles.listContent, {width: (numberOfCards-1) * spacing + 100}]}\n              style={{ transform: [{ rotate: `${rotation}deg` }] }}\n              />\n          </View>\n      );\n    } else { \n      return (\n          <View style={[styles.handContainer, {width: (numberOfCards-1) * spacing + 100}]}>\n              <FlatList horizontal={true}\n              data={hand}\n              keyExtractor={(item) => item.id}\n              renderItem={({ item, index }) => (\n                  <View style={[styles.cardWrapper, \n                  {left: index * spacing,}]}>\n                      <Card \n                          card={item}\n                          visible={visible}\n                      />\n                  </View>\n              )}\n              contentContainerStyle={[styles.listContent, {width: (numberOfCards-1) * spacing + 100}]}\n              style={{ transform: [{ rotate: `${rotation}deg` }] }}\n              />\n          </View>\n      );\n    }\n}\n\nconst styles = StyleSheet.create({\n    handContainer: {\n      height: 170, // Match card height\n      position: 'relative', // Allow absolute positioning of cards\n      overflow: 'hidden', // Hide overflowing cards\n      justifyContent: 'flex-end', // Align cards to the bottom\n      width: 500,\n    },\n    title: {\n      fontSize: 20,\n      fontWeight: 'bold',\n      marginBottom: 16,\n      textAlign: 'center',\n    },\n    cardWrapper: {\n      position: 'absolute', // Allow overlapping\n      zIndex: 1, // Ensure overlapping is in order of the cards\n      transform: [{ translateY: -140 }],\n    },\n    listContent: {\n      height: '100%',\n      flexDirection: 'row',\n      alignItems: 'flex-end', // Aligns cards to the bottom of the container\n      paddingBottom: 10, // Adds spacing from the bottom\n    },\n    selectedCardWrapper: {\n        borderWidth: 5,\n        borderColor: '#FFD700', // Highlight color (gold in this case)\n        borderRadius: -5,\n        zIndex: 2, // Ensure selected card is above other cards\n        transform: [{ translateY: -160 }],\n    },\n});\n\nexport default Hand;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}