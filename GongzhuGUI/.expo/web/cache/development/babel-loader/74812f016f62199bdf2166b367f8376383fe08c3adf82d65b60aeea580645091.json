{"ast":null,"code":"import _asyncToGenerator from \"@babel/runtime/helpers/asyncToGenerator\";\nimport _toConsumableArray from \"@babel/runtime/helpers/toConsumableArray\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nvar _jsxFileName = \"/Users/yuezhang/Documents/projects/gongzhu/GongzhuGUI/src/components/GameTable.tsx\",\n  _this = this;\nimport React, { useState, useEffect } from 'react';\nimport View from \"react-native-web/dist/exports/View\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport Button from \"react-native-web/dist/exports/Button\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Image from \"react-native-web/dist/exports/Image\";\nimport Modal from \"react-native-web/dist/exports/Modal\";\nimport FlatList from \"react-native-web/dist/exports/FlatList\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport Card from '../components/Card';\nimport { PIG, SHEEP, BLOOD, DOUBLER } from '../components/specialCards';\nimport Hand from '../components/Hand';\nimport Declaration from './Declaration';\nimport axios from 'axios';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n;\nvar defaultAvatars = [require('../../assets/images/avatars/You.png'), require('../../assets/images/avatars/Panda.png'), require('../../assets/images/avatars/Penguin.png'), require('../../assets/images/avatars/Elephant.png')];\nvar GameTable = function GameTable(_ref) {\n  var initialPlayers = _ref.initialPlayers,\n    online = _ref.online,\n    _ref$ai = _ref.ai,\n    ai = _ref$ai === void 0 ? \"normal\" : _ref$ai,\n    gameMode = _ref.gameMode,\n    enable_declarations = _ref.enable_declarations;\n  var maxRounds = 13;\n  var bottonTitle = \"Show Cards & Declaration\";\n  var _useState = useState(online ? [] : initialPlayers),\n    _useState2 = _slicedToArray(_useState, 2),\n    players = _useState2[0],\n    setPlayers = _useState2[1];\n  var _useState3 = useState(null),\n    _useState4 = _slicedToArray(_useState3, 2),\n    selectedPlayer = _useState4[0],\n    setSelectedPlayer = _useState4[1];\n  var _useState5 = useState(null),\n    _useState6 = _slicedToArray(_useState5, 2),\n    selectedCard = _useState6[0],\n    setSelectedCard = _useState6[1];\n  var _useState7 = useState([]),\n    _useState8 = _slicedToArray(_useState7, 2),\n    firstPlayerIndices = _useState8[0],\n    setFirstPlayerIndices = _useState8[1];\n  var _useState9 = useState([]),\n    _useState10 = _slicedToArray(_useState9, 2),\n    history = _useState10[0],\n    setHistory = _useState10[1];\n  var _useState11 = useState(0),\n    _useState12 = _slicedToArray(_useState11, 2),\n    firstPlayerIndex = _useState12[0],\n    setFirstPlayerIndex = _useState12[1];\n  var _useState13 = useState(false),\n    _useState14 = _slicedToArray(_useState13, 2),\n    readyToLog = _useState14[0],\n    setReadyToLog = _useState14[1];\n  var _useState15 = useState(0),\n    _useState16 = _slicedToArray(_useState15, 2),\n    currentPlayerIndex = _useState16[0],\n    setCurrentPlayerIndex = _useState16[1];\n  var _useState17 = useState(0),\n    _useState18 = _slicedToArray(_useState17, 2),\n    roundCount = _useState18[0],\n    setRoundCount = _useState18[1];\n  var _useState19 = useState(null),\n    _useState20 = _slicedToArray(_useState19, 2),\n    gameId = _useState20[0],\n    setGameId = _useState20[1];\n  var _useState21 = useState([]),\n    _useState22 = _slicedToArray(_useState21, 2),\n    cardsPlayedThisRound = _useState22[0],\n    setCardsPlayedThisRound = _useState22[1];\n  var _useState23 = useState([]),\n    _useState24 = _slicedToArray(_useState23, 2),\n    logs = _useState24[0],\n    setLogs = _useState24[1];\n  var _useState25 = useState(false),\n    _useState26 = _slicedToArray(_useState25, 2),\n    isLogExpanded = _useState26[0],\n    setIsLogExpanded = _useState26[1];\n  var _useState27 = useState(online ? true : false),\n    _useState28 = _slicedToArray(_useState27, 2),\n    loading = _useState28[0],\n    setLoading = _useState28[1];\n  var _useState29 = useState(false),\n    _useState30 = _slicedToArray(_useState29, 2),\n    started = _useState30[0],\n    setStarted = _useState30[1];\n  var _useState31 = useState(null),\n    _useState32 = _slicedToArray(_useState31, 2),\n    error = _useState32[0],\n    setError = _useState32[1];\n  var _useState33 = useState(false),\n    _useState34 = _slicedToArray(_useState33, 2),\n    isDeclarationPhase = _useState34[0],\n    setDeclarationPhase = _useState34[1];\n  var _useState35 = useState({\n      \"pig\": 'no',\n      'sheep': 'no',\n      \"doubler\": 'no',\n      \"blood\": 'no'\n    }),\n    _useState36 = _slicedToArray(_useState35, 2),\n    declarations = _useState36[0],\n    setDeclarations = _useState36[1];\n  var _useState37 = useState(null),\n    _useState38 = _slicedToArray(_useState37, 2),\n    actionValue = _useState38[0],\n    setActionValue = _useState38[1];\n  var API_URL = \"http://0.0.0.0:1926\";\n  var addLog = function addLog(message) {\n    setLogs(function (prevLogs) {\n      return [message].concat(_toConsumableArray(prevLogs));\n    });\n  };\n  var toggleLog = function toggleLog() {\n    setIsLogExpanded(!isLogExpanded);\n  };\n  var handleNextTurn = function handleNextTurn() {\n    if (gameMode == \"full\") {\n      if (isEndOneRound) {\n        endOneRound();\n        return;\n      } else if (isEndEpisode) {\n        endEpisode();\n      } else if (isYourTurn) {\n        if (isDeclarationPhase) {\n          handleDeclarations();\n        } else {\n          handlePlaySelectedCard();\n        }\n      } else {\n        handleNextPlayer();\n      }\n    } else {\n      if (isEndEpisode) {\n        endEpisode();\n      } else {\n        handleStep();\n      }\n    }\n  };\n  var fetchLogs = function () {\n    var _ref2 = _asyncToGenerator(function* () {\n      setLogs([]);\n      if (enable_declarations) {\n        addLog('---Declaration phase---');\n        for (var i = 0; i < 4; i++) {\n          var player = players[(i + firstPlayerIndices[0]) % 4];\n          addDeclarationsLog(player.name, {\n            \"closed_declarations\": player.closedDeclaredCards,\n            \"open_declarations\": player.openDeclaredCards\n          });\n        }\n        if (!isDeclarationPhase) {\n          addLog('---End Declaration phase---');\n        }\n      }\n      for (var r = 0; r < roundCount; r++) {\n        addLog(`---Round ${r + 1}---`);\n        for (var _i = 0; _i < 4; _i++) {\n          var _player = players[(_i + firstPlayerIndices[r]) % 4];\n          var move = history[r * 4 + _i];\n          addLog(`Round ${r + 1}: ` + `${_player.name} played ${move.rank} of ${move.suit}.`);\n        }\n        var largest_player = players[firstPlayerIndices[r + 1]];\n        addLog(`${largest_player.name} was the largest.`);\n        addLog(`---End Round ${r + 1}---`);\n      }\n      if (!isDeclarationPhase) {\n        addLog(`---Round ${roundCount + 1}---`);\n      }\n      for (var _i2 = 0; _i2 < cardsPlayedThisRound.length; _i2++) {\n        var _player2 = players[(_i2 + firstPlayerIndices[roundCount]) % 4];\n        var _move = history[roundCount * 4 + _i2];\n        addLog(`Round ${roundCount + 1}: ` + `${_player2.name} played ${_move.rank} of ${_move.suit}.`);\n      }\n    });\n    return function fetchLogs() {\n      return _ref2.apply(this, arguments);\n    };\n  }();\n  var convertToDeclarationRequest = function convertToDeclarationRequest() {\n    var closedDeclaredCards = [];\n    var openDeclaredCards = [];\n    if (declarations['pig'] != 'no') {\n      if (declarations['pig'] == 'open') {\n        openDeclaredCards.push(PIG);\n      } else {\n        closedDeclaredCards.push(PIG);\n      }\n    }\n    if (declarations['sheep'] != 'no') {\n      if (declarations['sheep'] == 'open') {\n        openDeclaredCards.push(SHEEP);\n      } else {\n        closedDeclaredCards.push(SHEEP);\n      }\n    }\n    if (declarations['blood'] != 'no') {\n      if (declarations['blood'] == 'open') {\n        openDeclaredCards.push(BLOOD);\n      } else {\n        closedDeclaredCards.push(BLOOD);\n      }\n    }\n    if (declarations['doubler'] != 'no') {\n      if (declarations['doubler'] == 'open') {\n        openDeclaredCards.push(DOUBLER);\n      } else {\n        closedDeclaredCards.push(DOUBLER);\n      }\n    }\n    return {\n      'id': gameId,\n      'closed_declarations': closedDeclaredCards,\n      'open_declarations': openDeclaredCards\n    };\n  };\n  var handleStep = function handleStep() {\n    if (isDeclarationPhase) {\n      var requestData = convertToDeclarationRequest();\n      axios.post(API_URL + '/step', requestData).then(function (response) {\n        var statusCode = response.status;\n        if (statusCode === 400) {\n          addLog(\"Invalid declaration by you. Please try again.\");\n          return;\n        }\n        fetchGameStates(gameId);\n      }).catch(function (error) {\n        if (error.status === 400) {\n          return;\n        }\n        console.error('Error fetching playing card: ', error);\n      });\n    }\n    if (selectedCard === null) {\n      console.warn('No card selected to play');\n      return;\n    }\n    var currentPlayedCard = selectedCard;\n    setSelectedCard(null);\n    if (online) {\n      var _requestData = {\n        'id': gameId,\n        'suit': currentPlayedCard.suit,\n        'rank': currentPlayedCard.rank\n      };\n      axios.post(API_URL + '/step', _requestData).then(function (response) {\n        var statusCode = response.status;\n        if (statusCode === 400) {\n          addLog(\"Invalid move by you. Please try again.\");\n          return;\n        }\n        fetchGameStates(gameId);\n      }).catch(function (error) {\n        if (error.status === 400) {\n          addLog(\"Invalid move by you. Please try again.\");\n          return;\n        }\n        console.error('Error fetching playing card: ', error);\n      });\n    } else if (playACard(players[0], currentPlayedCard)) {\n      setCurrentPlayerIndex((currentPlayerIndex + 1) % players.length);\n    }\n  };\n  var handleShowCollectedCards = function handleShowCollectedCards(player) {\n    setSelectedPlayer(player);\n  };\n  var handleCloseModal = function handleCloseModal() {\n    setSelectedPlayer(null);\n  };\n  var isValidMove = function isValidMove(card) {\n    return true;\n  };\n  var playACard = function playACard(player, card) {\n    var index = card === undefined ? 0 : player.hand.findIndex(function (item) {\n      return item.id === card.id;\n    });\n    card = player.hand[index];\n    if (isValidMove(card)) {\n      player.currentPlayedCard = card;\n      player.playedCards.push(card);\n      player.hand.splice(index, 1);\n      setCardsPlayedThisRound(function (prevCards) {\n        return [card].concat(_toConsumableArray(prevCards));\n      });\n      return true;\n    } else {\n      addLog(`Round ${roundCount + 1}: Invalid move by ${player.name}.`);\n      return false;\n    }\n  };\n  var addDeclarationsLog = function addDeclarationsLog(name, declarations) {\n    for (var card of declarations[\"open_declarations\"]) {\n      if (card.id == PIG.id) {\n        addLog(`${name} openly declared Pig!`);\n      }\n      if (card.id == SHEEP.id) {\n        addLog(`${name} openly declared Sheep!`);\n      }\n      if (card.id == BLOOD.id) {\n        addLog(`${name} openly declared Blood!`);\n      }\n      if (card.id == DOUBLER.id) {\n        addLog(`${name} openly declared Doubler!`);\n      }\n    }\n    if (name == 'You') {\n      for (var _card of declarations[\"closed_declarations\"]) {\n        if (_card.id == PIG.id) {\n          addLog(`${name} secretly declared Pig!`);\n        }\n        if (_card.id == SHEEP.id) {\n          addLog(`${name} secretly declared Sheep!`);\n        }\n        if (_card.id == BLOOD.id) {\n          addLog(`${name} secretly declared Blood!`);\n        }\n        if (_card.id == DOUBLER.id) {\n          addLog(`${name} secretly declared Doubler!`);\n        }\n      }\n    } else {\n      if (declarations[\"closed_declarations\"].length > 0) {\n        addLog(`${name} secretly declared ${declarations[\"closed_declarations\"].length} card(s)!`);\n      }\n    }\n  };\n  var handleNextPlayer = function handleNextPlayer() {\n    if (online) {\n      axios.post(API_URL + '/next_player', {\n        'id': gameId\n      }).then(function (response) {\n        var data = response.data;\n        var move = data.move;\n        fetchGameStates(gameId);\n      }).catch(function (error) {\n        console.error('Error fetching next player: ', error);\n      });\n    } else if (playACard(players[currentPlayerIndex])) {\n      setCurrentPlayerIndex((currentPlayerIndex + 1) % players.length);\n    }\n  };\n  var handlePlaySelectedCard = function handlePlaySelectedCard() {\n    if (selectedCard === null) {\n      console.warn('No card selected to play');\n      return;\n    }\n    var currentPlayedCard = selectedCard;\n    setSelectedCard(null);\n    if (online) {\n      var requestData = {\n        'id': gameId,\n        'suit': currentPlayedCard.suit,\n        'rank': currentPlayedCard.rank\n      };\n      axios.post(API_URL + '/play_card', requestData).then(function (response) {\n        var statusCode = response.status;\n        if (statusCode === 400) {\n          addLog(\"Invalid move by you. Please try again.\");\n          return;\n        }\n        fetchGameStates(gameId);\n      }).catch(function (error) {\n        if (error.status === 400) {\n          addLog(\"Invalid move by you. Please try again.\");\n          return;\n        }\n        console.error('Error fetching playing card: ', error);\n      });\n    } else if (playACard(players[0], currentPlayedCard)) {\n      setCurrentPlayerIndex((currentPlayerIndex + 1) % players.length);\n    }\n  };\n  var endOneRound = function () {\n    var _ref3 = _asyncToGenerator(function* () {\n      try {\n        var largestIndex;\n        if (online) {\n          var response = yield axios.post(API_URL + '/next_round', {\n            'id': gameId\n          });\n          var data = response.data;\n          largestIndex = data.largestIndex;\n          yield fetchGameStates(gameId);\n        } else {\n          largestIndex = Math.floor(Math.random() * 4);\n          setRoundCount(function (prevCount) {\n            return prevCount + 1;\n          });\n        }\n        for (var i = 0; i < players.length; i++) {\n          players[largestIndex].collectedCards.push(players[i].currentPlayedCard);\n          players[i].currentPlayedCard = null;\n        }\n        if (roundCount < maxRounds) {\n          setCardsPlayedThisRound([]);\n          setFirstPlayerIndex(largestIndex);\n          setCurrentPlayerIndex(largestIndex);\n        } else {\n          setFirstPlayerIndex(-1);\n          setCurrentPlayerIndex(-1);\n        }\n      } catch (error) {\n        console.error('Error in endOneRound: ', error);\n      }\n    });\n    return function endOneRound() {\n      return _ref3.apply(this, arguments);\n    };\n  }();\n  var handleDeclarations = function handleDeclarations() {\n    var requestData = convertToDeclarationRequest();\n    axios.post(API_URL + '/make_declarations', requestData).then(function (response) {\n      var statusCode = response.status;\n      addDeclarationsLog(\"You\", requestData);\n      if (statusCode === 400) {\n        addLog(\"Invalid declaration by you. Please try again.\");\n        return;\n      }\n      fetchGameStates(gameId);\n    }).catch(function (error) {\n      if (error.status === 400) {\n        addLog(\"Invalid move by you. Please try again.\");\n        return;\n      }\n      console.error('Error fetching playing card: ', error);\n    });\n  };\n  var startGame = function startGame() {\n    axios.post(API_URL + '/start_game', {\n      \"ai\": ai,\n      \"auto\": gameMode != 'full',\n      \"declaration\": enable_declarations\n    }).then(function (response) {\n      fetchGameStates(response.data.id);\n      setDeclarations({\n        \"pig\": 'no',\n        'sheep': 'no',\n        \"doubler\": 'no',\n        \"blood\": 'no'\n      });\n    }).catch(function (error) {\n      console.error(\"There was an error starting the game!\", error);\n    });\n  };\n  var endEpisode = function endEpisode() {\n    startGame();\n  };\n  var fetchGameStates = function () {\n    var _ref4 = _asyncToGenerator(function* (id) {\n      try {\n        setLoading(true);\n        var response = yield axios.post(API_URL + '/get_game_state', {\n          'id': id\n        });\n        var game_state = response.data.game_state;\n        setPlayers(game_state.players);\n        setFirstPlayerIndex(game_state.firstPlayerIndex);\n        setRoundCount(game_state.roundCount);\n        setCurrentPlayerIndex(game_state.currentPlayerIndex);\n        setCardsPlayedThisRound(game_state.cardsPlayedThisRound);\n        setDeclarationPhase(game_state.isDeclarationPhase);\n        setGameId(id);\n        setFirstPlayerIndices(game_state.firstPlayerIndices);\n        setHistory(_toConsumableArray(game_state.history));\n        setReadyToLog(true);\n      } catch (err) {\n        console.error(\"Failed to fetch game states:\", err);\n        setError(\"Failed to load player data.\");\n      } finally {\n        setLoading(false);\n        setStarted(true);\n      }\n    });\n    return function fetchGameStates(_x) {\n      return _ref4.apply(this, arguments);\n    };\n  }();\n  if (online) {\n    useEffect(function () {\n      startGame();\n    }, []);\n  }\n  var isEndOneRound = false;\n  if (players.length > 0) {\n    isEndOneRound = players[0].currentPlayedCard != null && players[1].currentPlayedCard != null && players[2].currentPlayedCard != null && players[3].currentPlayedCard != null;\n  }\n  var isEndEpisode = roundCount === maxRounds && !isEndOneRound;\n  var isYourTurn = currentPlayerIndex === 0;\n  if (isEndOneRound && currentPlayerIndex != -1) {\n    setCurrentPlayerIndex(-1);\n  }\n  useEffect(function () {\n    if (readyToLog) {\n      fetchLogs();\n      setReadyToLog(false);\n    }\n  }, [readyToLog]);\n  useEffect(function () {\n    if (selectedCard == null) {\n      setActionValue(null);\n    } else {\n      var requestData = {\n        'id': gameId,\n        'suit': selectedCard.suit,\n        'rank': selectedCard.rank\n      };\n      axios.post(API_URL + '/evaluate', requestData).then(function (response) {\n        var statusCode = response.status;\n        if (statusCode === 400) {\n          return;\n        }\n        var data = response.data;\n        var evaluation = data.evaluation;\n        setActionValue(evaluation);\n      }).catch(function (error) {});\n    }\n  }, [selectedCard]);\n  useEffect(function () {\n    var handleKeyPress = function handleKeyPress(event) {\n      if (event.key.toLowerCase() === 'n') {\n        handleNextTurn();\n      }\n    };\n    window.addEventListener('keydown', handleKeyPress);\n    return function () {\n      window.removeEventListener('keydown', handleKeyPress);\n    };\n  }, [players, selectedCard, currentPlayerIndex]);\n  if (!started) {\n    return _jsxDEV(Text, {\n      children: \"Loading Game...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 555,\n      columnNumber: 13\n    }, _this);\n  }\n  return _jsxDEV(View, {\n    style: styles.tableContainer,\n    children: [_jsxDEV(View, {\n      style: [styles.playerContainer, styles.topPlayer],\n      children: [_jsxDEV(Hand, {\n        hand: players[2].hand,\n        rotation: 0,\n        visible: false\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 562,\n        columnNumber: 13\n      }, _this), _jsxDEV(View, {\n        style: [styles.avatarNameContainer, currentPlayerIndex === 2 && styles.currentPlayerWrapper, {\n          transform: [{\n            rotate: '180deg'\n          }]\n        }],\n        children: [_jsxDEV(Image, {\n          source: players[2].avatar ? players[2].avatar : defaultAvatars[2],\n          style: styles.avatar\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 566,\n          columnNumber: 13\n        }, _this), _jsxDEV(Text, {\n          style: styles.playerName,\n          children: players[2].name\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 567,\n          columnNumber: 13\n        }, _this), _jsxDEV(Text, {\n          style: styles.playerName,\n          children: [\"Score : \", players[2].score]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 568,\n          columnNumber: 13\n        }, _this), _jsxDEV(Button, {\n          title: bottonTitle,\n          onPress: function onPress() {\n            return handleShowCollectedCards(players[2]);\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 569,\n          columnNumber: 13\n        }, _this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 563,\n        columnNumber: 13\n      }, _this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 561,\n      columnNumber: 9\n    }, _this), _jsxDEV(View, {\n      style: [styles.playedCardContainer, {\n        top: 180\n      }],\n      children: players[2].currentPlayedCard != null && _jsxDEV(Card, {\n        card: players[2].currentPlayedCard,\n        rotation: 180\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 578,\n        columnNumber: 13\n      }, _this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 576,\n      columnNumber: 9\n    }, _this), _jsxDEV(View, {\n      style: [styles.playerContainer, styles.leftPlayer],\n      children: [_jsxDEV(View, {\n        style: [styles.avatarNameContainer, currentPlayerIndex === 3 && styles.currentPlayerWrapper],\n        children: [_jsxDEV(Image, {\n          source: players[3].avatar ? players[3].avatar : defaultAvatars[3],\n          style: styles.avatar\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 585,\n          columnNumber: 17\n        }, _this), _jsxDEV(Text, {\n          style: styles.playerName,\n          children: players[3].name\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 586,\n          columnNumber: 17\n        }, _this), _jsxDEV(Text, {\n          style: styles.playerName,\n          children: [\"Score : \", players[3].score]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 587,\n          columnNumber: 17\n        }, _this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 583,\n        columnNumber: 13\n      }, _this), _jsxDEV(Button, {\n        title: bottonTitle,\n        onPress: function onPress() {\n          return handleShowCollectedCards(players[3]);\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 589,\n        columnNumber: 13\n      }, _this), _jsxDEV(Hand, {\n        hand: players[3].hand,\n        rotation: 0,\n        visible: false\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 593,\n        columnNumber: 13\n      }, _this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 582,\n      columnNumber: 9\n    }, _this), _jsxDEV(View, {\n      style: [styles.playedCardContainer, {\n        left: 450\n      }],\n      children: players[3].currentPlayedCard != null && _jsxDEV(Card, {\n        card: players[3].currentPlayedCard,\n        rotation: 180\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 598,\n        columnNumber: 13\n      }, _this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 596,\n      columnNumber: 9\n    }, _this), _jsxDEV(View, {\n      style: [styles.playerContainer, styles.rightPlayer],\n      children: [_jsxDEV(View, {\n        style: [styles.avatarNameContainer, currentPlayerIndex === 1 && styles.currentPlayerWrapper],\n        children: [_jsxDEV(Image, {\n          source: players[1].avatar ? players[1].avatar : defaultAvatars[1],\n          style: styles.avatar\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 605,\n          columnNumber: 17\n        }, _this), _jsxDEV(Text, {\n          style: styles.playerName,\n          children: players[1].name\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 606,\n          columnNumber: 17\n        }, _this), _jsxDEV(Text, {\n          style: styles.playerName,\n          children: [\"Score : \", players[1].score]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 607,\n          columnNumber: 17\n        }, _this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 603,\n        columnNumber: 13\n      }, _this), _jsxDEV(Button, {\n        title: bottonTitle,\n        onPress: function onPress() {\n          return handleShowCollectedCards(players[1]);\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 609,\n        columnNumber: 13\n      }, _this), _jsxDEV(Hand, {\n        hand: players[1].hand,\n        rotation: 0,\n        visible: false\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 613,\n        columnNumber: 13\n      }, _this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 602,\n      columnNumber: 9\n    }, _this), _jsxDEV(View, {\n      style: [styles.playedCardContainer, {\n        right: 450\n      }],\n      children: players[1].currentPlayedCard != null && _jsxDEV(Card, {\n        card: players[1].currentPlayedCard,\n        rotation: 180\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 619,\n        columnNumber: 13\n      }, _this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 617,\n      columnNumber: 9\n    }, _this), _jsxDEV(View, {\n      style: [styles.playerContainer, styles.bottomPlayer],\n      children: [_jsxDEV(Hand, {\n        hand: players[0].hand,\n        rotation: 0,\n        visible: true,\n        selectable: isYourTurn && !isDeclarationPhase,\n        selectedCard: isYourTurn ? selectedCard : null,\n        setSelectedCard: setSelectedCard\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 624,\n        columnNumber: 13\n      }, _this), _jsxDEV(View, {\n        style: [styles.avatarNameContainer, currentPlayerIndex === 0 && styles.currentPlayerWrapper],\n        children: [_jsxDEV(Image, {\n          source: players[0].avatar ? players[0].avatar : defaultAvatars[0],\n          style: styles.avatar\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 631,\n          columnNumber: 17\n        }, _this), _jsxDEV(Text, {\n          style: styles.playerName,\n          children: players[0].name\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 632,\n          columnNumber: 17\n        }, _this), _jsxDEV(Text, {\n          style: styles.playerName,\n          children: [\"Score : \", players[0].score]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 633,\n          columnNumber: 17\n        }, _this), _jsxDEV(Button, {\n          title: bottonTitle,\n          onPress: function onPress() {\n            return handleShowCollectedCards(players[0]);\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 634,\n          columnNumber: 17\n        }, _this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 628,\n        columnNumber: 13\n      }, _this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 623,\n      columnNumber: 9\n    }, _this), _jsxDEV(View, {\n      style: [styles.playedCardContainer, {\n        bottom: 180\n      }],\n      children: players[0].currentPlayedCard != null && _jsxDEV(Card, {\n        card: players[0].currentPlayedCard,\n        rotation: 180\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 643,\n        columnNumber: 13\n      }, _this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 641,\n      columnNumber: 9\n    }, _this), selectedPlayer && _jsxDEV(Modal, {\n      visible: true,\n      animationType: \"none\",\n      transparent: true,\n      onRequestClose: handleCloseModal,\n      children: _jsxDEV(View, {\n        style: styles.modalContainer,\n        children: [_jsxDEV(Text, {\n          style: styles.modalTitle,\n          children: [selectedPlayer.name, \"'s Cards & Declaration\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 656,\n          columnNumber: 17\n        }, _this), _jsxDEV(Text, {\n          style: styles.sectionTitle,\n          children: \"Collected Cards:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 660,\n          columnNumber: 17\n        }, _this), _jsxDEV(FlatList, {\n          data: selectedPlayer.collectedCards,\n          keyExtractor: function keyExtractor(item) {\n            return item.id;\n          },\n          renderItem: function renderItem(_ref5) {\n            var item = _ref5.item;\n            return _jsxDEV(Card, {\n              card: item\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 665,\n              columnNumber: 21\n            }, _this);\n          },\n          horizontal: true,\n          contentContainerStyle: styles.cardsContainer\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 661,\n          columnNumber: 17\n        }, _this), _jsxDEV(Text, {\n          style: styles.sectionTitle,\n          children: \"Played Cards:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 671,\n          columnNumber: 17\n        }, _this), _jsxDEV(FlatList, {\n          data: selectedPlayer.playedCards,\n          keyExtractor: function keyExtractor(item) {\n            return item.id;\n          },\n          renderItem: function renderItem(_ref6) {\n            var item = _ref6.item;\n            return _jsxDEV(Card, {\n              card: item\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 676,\n              columnNumber: 21\n            }, _this);\n          },\n          horizontal: true,\n          contentContainerStyle: styles.cardsContainer\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 672,\n          columnNumber: 17\n        }, _this), _jsxDEV(Text, {\n          style: styles.sectionTitle,\n          children: \"Close Declared Cards:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 683,\n          columnNumber: 17\n        }, _this), _jsxDEV(FlatList, {\n          data: selectedPlayer.closedDeclaredCards,\n          keyExtractor: function keyExtractor(item) {\n            return item.id;\n          },\n          renderItem: function renderItem(_ref7) {\n            var item = _ref7.item;\n            return _jsxDEV(Card, {\n              card: item,\n              visible: item.known\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 688,\n              columnNumber: 21\n            }, _this);\n          },\n          horizontal: true,\n          contentContainerStyle: styles.cardsContainer\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 684,\n          columnNumber: 17\n        }, _this), _jsxDEV(Text, {\n          style: styles.sectionTitle,\n          children: \"Open Declared Cards:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 693,\n          columnNumber: 17\n        }, _this), _jsxDEV(FlatList, {\n          data: selectedPlayer.openDeclaredCards,\n          keyExtractor: function keyExtractor(item) {\n            return item.id;\n          },\n          renderItem: function renderItem(_ref8) {\n            var item = _ref8.item;\n            return _jsxDEV(Card, {\n              card: item\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 698,\n              columnNumber: 21\n            }, _this);\n          },\n          horizontal: true,\n          contentContainerStyle: styles.cardsContainer\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 694,\n          columnNumber: 17\n        }, _this), _jsxDEV(Button, {\n          title: \"Close\",\n          onPress: handleCloseModal\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 705,\n          columnNumber: 17\n        }, _this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 655,\n        columnNumber: 13\n      }, _this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 649,\n      columnNumber: 13\n    }, _this), _jsxDEV(Modal, {\n      visible: isLogExpanded,\n      animationType: \"none\",\n      transparent: true,\n      onRequestClose: toggleLog,\n      children: _jsxDEV(View, {\n        style: styles.modalContainer,\n        children: [_jsxDEV(Text, {\n          style: styles.modalTitle,\n          children: \"Full Log\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 718,\n          columnNumber: 13\n        }, _this), _jsxDEV(FlatList, {\n          data: logs,\n          keyExtractor: function keyExtractor(item, index) {\n            return index.toString();\n          },\n          renderItem: function renderItem(_ref9) {\n            var item = _ref9.item;\n            return _jsxDEV(Text, {\n              style: styles.modalLogText,\n              children: item\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 722,\n              columnNumber: 43\n            }, _this);\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 719,\n          columnNumber: 13\n        }, _this), _jsxDEV(Button, {\n          title: \"Close\",\n          onPress: toggleLog\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 724,\n          columnNumber: 13\n        }, _this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 717,\n        columnNumber: 13\n      }, _this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 711,\n      columnNumber: 9\n    }, _this), _jsxDEV(Text, {\n      style: styles.playerName,\n      children: [\"Estimated Action Value : \", actionValue]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 729,\n      columnNumber: 13\n    }, _this), loading ? _jsxDEV(Text, {\n      children: \"Loading...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 731,\n      columnNumber: 14\n    }, _this) : isEndEpisode ? _jsxDEV(Button, {\n      title: \"New Game (n)\",\n      onPress: handleNextTurn\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 733,\n      columnNumber: 17\n    }, _this) : isEndOneRound ? _jsxDEV(Button, {\n      title: \"End this Round (n)\",\n      onPress: handleNextTurn\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 735,\n      columnNumber: 17\n    }, _this) : isYourTurn ? isDeclarationPhase ? _jsxDEV(View, {\n      children: [_jsxDEV(Declaration, {\n        hand: players[0].hand,\n        declarations: declarations,\n        setDeclarations: setDeclarations\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 738,\n        columnNumber: 21\n      }, _this), _jsxDEV(Button, {\n        title: \"Finish Declaration (n)\",\n        onPress: handleNextTurn\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 743,\n        columnNumber: 21\n      }, _this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 737,\n      columnNumber: 17\n    }, _this) : _jsxDEV(Button, {\n      title: \"Play Selected Card (n)\",\n      onPress: handleNextTurn\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 745,\n      columnNumber: 17\n    }, _this) : _jsxDEV(Button, {\n      title: \"Next (n)\",\n      onPress: handleNextTurn\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 747,\n      columnNumber: 17\n    }, _this), _jsxDEV(View, {\n      style: styles.logSection,\n      children: [_jsxDEV(Text, {\n        style: styles.logTitle,\n        children: \"Logs:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 752,\n        columnNumber: 13\n      }, _this), _jsxDEV(FlatList, {\n        data: logs,\n        keyExtractor: function keyExtractor(item, index) {\n          return index.toString();\n        },\n        renderItem: function renderItem(_ref10) {\n          var item = _ref10.item;\n          return _jsxDEV(Text, {\n            style: styles.logText,\n            children: item\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 756,\n            columnNumber: 39\n          }, _this);\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 753,\n        columnNumber: 13\n      }, _this), _jsxDEV(TouchableOpacity, {\n        style: styles.expandButton,\n        onPress: toggleLog,\n        children: _jsxDEV(Text, {\n          style: styles.expandButtonText,\n          children: \"Expand\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 759,\n          columnNumber: 17\n        }, _this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 758,\n        columnNumber: 13\n      }, _this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 751,\n      columnNumber: 9\n    }, _this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 559,\n    columnNumber: 5\n  }, _this);\n};\nvar styles = StyleSheet.create({\n  tableContainer: {\n    flex: 1,\n    justifyContent: 'center',\n    alignItems: 'center',\n    width: '100%'\n  },\n  playerContainer: {\n    position: 'absolute',\n    alignItems: 'center'\n  },\n  topPlayer: {\n    top: 20,\n    flexDirection: 'row',\n    transform: [{\n      rotate: '180deg'\n    }]\n  },\n  bottomPlayer: {\n    bottom: 20,\n    flexDirection: 'row',\n    alignItems: 'center'\n  },\n  leftPlayer: {\n    left: 20,\n    justifyContent: 'center',\n    transform: [{\n      rotate: '90deg'\n    }]\n  },\n  rightPlayer: {\n    right: 20,\n    justifyContent: 'center',\n    transform: [{\n      rotate: '-90deg'\n    }]\n  },\n  avatar: {\n    width: 50,\n    height: 50,\n    borderRadius: 25,\n    marginBottom: 5\n  },\n  playerName: {\n    fontSize: 16,\n    fontWeight: 'bold',\n    color: '#222222',\n    marginBottom: 5\n  },\n  avatarNameContainer: {\n    marginLeft: 10,\n    alignItems: 'center'\n  },\n  currentPlayerWrapper: {\n    borderWidth: 5,\n    borderColor: '#FFD700',\n    borderRadius: -5\n  },\n  modalContainer: {\n    flex: 1,\n    justifyContent: 'center',\n    backgroundColor: 'rgba(0, 0, 0, 0.8)',\n    padding: 20\n  },\n  modalTitle: {\n    fontSize: 18,\n    fontWeight: 'bold',\n    color: '#fff',\n    textAlign: 'center',\n    marginBottom: 10\n  },\n  cardsContainer: {\n    flexDirection: 'row',\n    justifyContent: 'center',\n    marginBottom: 2\n  },\n  sectionTitle: {\n    fontSize: 16,\n    fontWeight: 'bold',\n    color: '#FFD700'\n  },\n  playedCardContainer: {\n    position: 'absolute',\n    zIndex: 2\n  },\n  logSection: {\n    position: 'absolute',\n    bottom: 0,\n    left: 0,\n    width: '23%',\n    maxHeight: '14%',\n    backgroundColor: '#222',\n    padding: 10,\n    borderTopRightRadius: 10,\n    borderBottomRightRadius: 0,\n    borderTopLeftRadius: 0,\n    borderBottomLeftRadius: 10,\n    overflow: 'hidden'\n  },\n  logTitle: {\n    color: '#fff',\n    fontSize: 16,\n    fontWeight: 'bold',\n    marginBottom: 5\n  },\n  logText: {\n    color: '#ccc',\n    fontSize: 14\n  },\n  modalLogText: {\n    color: '#fff',\n    fontSize: 14,\n    marginBottom: 5\n  },\n  expandButton: {\n    marginTop: 10,\n    padding: 5,\n    backgroundColor: '#444',\n    alignItems: 'center',\n    borderRadius: 5\n  },\n  expandButtonText: {\n    color: '#fff',\n    fontSize: 14\n  }\n});\nexport default GameTable;","map":{"version":3,"names":["React","useState","useEffect","View","Text","Button","StyleSheet","Image","Modal","FlatList","TouchableOpacity","Card","PIG","SHEEP","BLOOD","DOUBLER","Hand","Declaration","axios","jsxDEV","_jsxDEV","defaultAvatars","require","GameTable","_ref","initialPlayers","online","_ref$ai","ai","gameMode","enable_declarations","maxRounds","bottonTitle","_useState","_useState2","_slicedToArray","players","setPlayers","_useState3","_useState4","selectedPlayer","setSelectedPlayer","_useState5","_useState6","selectedCard","setSelectedCard","_useState7","_useState8","firstPlayerIndices","setFirstPlayerIndices","_useState9","_useState10","history","setHistory","_useState11","_useState12","firstPlayerIndex","setFirstPlayerIndex","_useState13","_useState14","readyToLog","setReadyToLog","_useState15","_useState16","currentPlayerIndex","setCurrentPlayerIndex","_useState17","_useState18","roundCount","setRoundCount","_useState19","_useState20","gameId","setGameId","_useState21","_useState22","cardsPlayedThisRound","setCardsPlayedThisRound","_useState23","_useState24","logs","setLogs","_useState25","_useState26","isLogExpanded","setIsLogExpanded","_useState27","_useState28","loading","setLoading","_useState29","_useState30","started","setStarted","_useState31","_useState32","error","setError","_useState33","_useState34","isDeclarationPhase","setDeclarationPhase","_useState35","_useState36","declarations","setDeclarations","_useState37","_useState38","actionValue","setActionValue","API_URL","addLog","message","prevLogs","concat","_toConsumableArray","toggleLog","handleNextTurn","isEndOneRound","endOneRound","isEndEpisode","endEpisode","isYourTurn","handleDeclarations","handlePlaySelectedCard","handleNextPlayer","handleStep","fetchLogs","_ref2","_asyncToGenerator","i","player","addDeclarationsLog","name","closedDeclaredCards","openDeclaredCards","r","move","rank","suit","largest_player","length","apply","arguments","convertToDeclarationRequest","push","requestData","post","then","response","statusCode","status","fetchGameStates","catch","console","warn","currentPlayedCard","playACard","handleShowCollectedCards","handleCloseModal","isValidMove","card","index","undefined","hand","findIndex","item","id","playedCards","splice","prevCards","data","_ref3","largestIndex","Math","floor","random","prevCount","collectedCards","startGame","_ref4","game_state","err","_x","evaluation","handleKeyPress","event","key","toLowerCase","window","addEventListener","removeEventListener","children","fileName","_jsxFileName","lineNumber","columnNumber","_this","style","styles","tableContainer","playerContainer","topPlayer","rotation","visible","avatarNameContainer","currentPlayerWrapper","transform","rotate","source","avatar","playerName","score","title","onPress","playedCardContainer","top","leftPlayer","left","rightPlayer","right","bottomPlayer","selectable","bottom","animationType","transparent","onRequestClose","modalContainer","modalTitle","sectionTitle","keyExtractor","renderItem","_ref5","horizontal","contentContainerStyle","cardsContainer","_ref6","_ref7","known","_ref8","toString","_ref9","modalLogText","logSection","logTitle","_ref10","logText","expandButton","expandButtonText","create","flex","justifyContent","alignItems","width","position","flexDirection","height","borderRadius","marginBottom","fontSize","fontWeight","color","marginLeft","borderWidth","borderColor","backgroundColor","padding","textAlign","zIndex","maxHeight","borderTopRightRadius","borderBottomRightRadius","borderTopLeftRadius","borderBottomLeftRadius","overflow","marginTop"],"sources":["/Users/yuezhang/Documents/projects/gongzhu/GongzhuGUI/src/components/GameTable.tsx"],"sourcesContent":["// Game table component\nimport React, { useState, useEffect, useRef } from 'react';\nimport { View, Text, Button, StyleSheet, Image, Modal, FlatList, TouchableOpacity  } from 'react-native';\nimport Card from '../components/Card';\nimport {PIG, SHEEP, BLOOD, DOUBLER, SPECIAL_CARDS} from '../components/specialCards';\nimport Hand from '../components/Hand';\nimport Declaration from './Declaration';\nimport { CardInterface, PlayerInterface, DeclarationsInterface } from '../types';\nimport axios from 'axios';\nimport Constants from 'expo-constants';\n\ninterface GameTableProps {\n  initialPlayers: PlayerInterface[]; \n  online: boolean; \n  ai: String; \n  gameMode: String; \n  enable_declarations: boolean; \n};\n\nconst defaultAvatars = [\n    require('../../assets/images/avatars/You.png'),\n    require('../../assets/images/avatars/Panda.png'),\n    require('../../assets/images/avatars/Penguin.png'),\n    require('../../assets/images/avatars/Elephant.png')\n];\n\nconst GameTable: React.FC<GameTableProps> = ({ initialPlayers, online, ai = \"normal\", gameMode, enable_declarations }) => {\n    const maxRounds = 13;\n    const bottonTitle = \"Show Cards & Declaration\";\n\n    const [players, setPlayers] = useState<PlayerInterface[]>(online ? [] : initialPlayers);  \n    const [selectedPlayer, setSelectedPlayer] = useState<PlayerInterface | null>(null);\n    const [selectedCard, setSelectedCard] = useState<CardInterface | null>(null);\n    const [firstPlayerIndices, setFirstPlayerIndices] = useState<number[]>([]);\n    const [history, setHistory] = useState<CardInterface[]>([]);\n    const [firstPlayerIndex, setFirstPlayerIndex] = useState(0);\n    const [readyToLog, setReadyToLog] = useState<boolean>(false);\n    const [currentPlayerIndex, setCurrentPlayerIndex] = useState(0);\n    const [roundCount, setRoundCount] = useState(0);\n    const [gameId, setGameId] = useState<String | null> (null); \n    const [cardsPlayedThisRound, setCardsPlayedThisRound] = useState<CardInterface[]>([]);\n    const [logs, setLogs] = useState<string[]>([]);\n    const [isLogExpanded, setIsLogExpanded] = useState<boolean>(false);\n    const [loading, setLoading] = useState<boolean>(online ? true : false);\n    const [started, setStarted] = useState<boolean>(false);\n    const [error, setError] = useState<String | null>(null);\n    const [isDeclarationPhase, setDeclarationPhase] = useState<boolean>(false);\n    const [declarations, setDeclarations] = useState<DeclarationsInterface> ({\n        \"pig\" : 'no',\n        'sheep': 'no',\n        \"doubler\": 'no',\n        \"blood\": 'no'\n    });\n    const [actionValue, setActionValue] = useState<number | null>(null);\n    // If deployed, use the api from the environment variable\n    // const API_URL = Constants.expoConfig?.extra?.apiUrl;\n    const API_URL = \"http://0.0.0.0:1926\";\n    const addLog = (message: string) => {\n        setLogs(prevLogs => [message, ...prevLogs]);\n    }\n\n    const toggleLog = () => {\n        setIsLogExpanded(!isLogExpanded);\n    };\n\n    // console.log(API_URL);\n    const handleNextTurn = () => {\n        // If the game mode is set to be full, then display each turn\n        if (gameMode == \"full\") {\n            if (isEndOneRound) {\n                endOneRound();\n                return;\n            } else if (isEndEpisode) {\n                endEpisode();\n            } else if (isYourTurn) {\n                if (isDeclarationPhase) {\n                    handleDeclarations();\n                } else {\n                    handlePlaySelectedCard();\n                }\n            } else {\n                handleNextPlayer();\n            }\n        } else { // If not, only display the state when the player needs to take actions\n            if (isEndEpisode) {\n                endEpisode();\n            } else {\n                handleStep();\n            }\n        }\n    }\n\n    // Fetch the log based on history and first players\n    const fetchLogs = async () => {\n        setLogs([]);\n        // If there is a declaration phase\n        if (enable_declarations) {\n            addLog('---Declaration phase---');\n            for (let i = 0; i < 4; i++) {\n                const player = players[(i + firstPlayerIndices[0]) % 4];\n                addDeclarationsLog(player.name,\n                {\n                    \"closed_declarations\" : player.closedDeclaredCards,\n                    \"open_declarations\" : player.openDeclaredCards,\n                });\n            }\n            if (!isDeclarationPhase) {\n                addLog('---End Declaration phase---');\n            }\n        }\n        // \n        for (let r = 0; r < roundCount; r++) {\n            addLog(`---Round ${r+1}---`);\n            for (let i = 0; i < 4; i++) {\n                const player = players[(i + firstPlayerIndices[r]) % 4];\n                const move = history[r * 4 + i];\n                addLog(`Round ${r+1}: ` + `${player.name} played ${move.rank} of ${move.suit}.`);\n            }\n            const largest_player = players[firstPlayerIndices[r+1]];\n            addLog(`${largest_player.name} was the largest.`);\n            addLog(`---End Round ${r+1}---`);\n        }\n        //\n        if (!isDeclarationPhase)  {\n            addLog(`---Round ${roundCount+1}---`);\n        }\n        for (let i = 0; i < cardsPlayedThisRound.length; i++) {\n            const player = players[(i + firstPlayerIndices[roundCount]) % 4];\n            const move = history[roundCount * 4 + i];\n            addLog(`Round ${roundCount+1}: ` + `${player.name} played ${move.rank} of ${move.suit}.`);            \n        }\n        // console.log('History: ', history);\n    }\n\n    // Convert declarations to api request format\n    const convertToDeclarationRequest = () => {\n        let closedDeclaredCards: CardInterface[] = [];\n        let openDeclaredCards: CardInterface[] = [];\n        if (declarations['pig'] != 'no') {\n            if (declarations['pig'] == 'open') {\n                openDeclaredCards.push(PIG);\n            } else {\n                closedDeclaredCards.push(PIG);\n            }\n        }\n        if (declarations['sheep'] != 'no') {\n            if (declarations['sheep'] == 'open') {\n                openDeclaredCards.push(SHEEP);\n            } else {\n                closedDeclaredCards.push(SHEEP);\n            }\n        }\n        if (declarations['blood'] != 'no') {\n            if (declarations['blood'] == 'open') {\n                openDeclaredCards.push(BLOOD);\n            } else {\n                closedDeclaredCards.push(BLOOD);\n            }\n        }\n        if (declarations['doubler'] != 'no') {\n            if (declarations['doubler'] == 'open') {\n                openDeclaredCards.push(DOUBLER);\n            } else {\n                closedDeclaredCards.push(DOUBLER);\n            }\n        }\n        return {\n            'id' : gameId,\n            'closed_declarations' : closedDeclaredCards,\n            'open_declarations' : openDeclaredCards\n        }\n    }\n\n    const handleStep = () => {\n        // Logic to play the selected card. You can implement this as per the game rules.\n        if (isDeclarationPhase) {\n            const requestData = convertToDeclarationRequest(); // request\n            // console.log(requestData);\n            axios.post(API_URL + '/step', requestData).then((response) => {\n                // const data = response.data;\n                const statusCode = response.status;\n                // addDeclarationsLog(\"You\", requestData)\n                if (statusCode === 400) {\n                    addLog(\"Invalid declaration by you. Please try again.\");\n                    return;\n                }\n                // addLog(`Round ${roundCount+1}: ` + `you played ${currentPlayedCard.rank} of ${currentPlayedCard.suit}.`);\n                fetchGameStates(gameId);\n                // setCurrentPlayerIndex((currentPlayerIndex + 1) % players.length);\n            }).catch((error) => {\n                if (error.status === 400 ) {\n                    // addLog(\"Invalid move by you. Please try again.\");\n                    return;\n                }\n                console.error('Error fetching playing card: ', error);\n            });\n        }\n        if (selectedCard === null) {\n            console.warn('No card selected to play');\n            return;\n        }\n        const currentPlayedCard = selectedCard;\n        setSelectedCard(null);\n\n        if (online) {\n            const requestData = {\n                'id' : gameId,\n                'suit' : currentPlayedCard.suit,\n                'rank' : currentPlayedCard.rank,\n            }\n            axios.post(API_URL + '/step', requestData).then((response) => {\n                // const data = response.data;\n                const statusCode = response.status;\n                if (statusCode === 400) {\n                    addLog(\"Invalid move by you. Please try again.\");\n                    return;\n                }\n                // addLog(`Round ${roundCount+1}: ` + `you played ${currentPlayedCard.rank} of ${currentPlayedCard.suit}.`);\n                fetchGameStates(gameId);\n                // setCurrentPlayerIndex((currentPlayerIndex + 1) % players.length);\n            }).catch((error) => {\n                if (error.status === 400 ) {\n                    addLog(\"Invalid move by you. Please try again.\");\n                    return;\n                }\n                console.error('Error fetching playing card: ', error);\n            });\n        } else if ( playACard(players[0], currentPlayedCard) ) {\n            setCurrentPlayerIndex((currentPlayerIndex + 1) % players.length);\n        }\n    }\n    \n    const handleShowCollectedCards = (player: PlayerInterface) => {\n        setSelectedPlayer(player);\n    };\n\n    const handleCloseModal = () => {\n        setSelectedPlayer(null);\n    };\n\n    const isValidMove = (card: CardInterface) : boolean   => {  \n        // Deprecated method\n        // Now use api to determine whether a move is valid\n        return true; \n    };\n\n    const playACard = (player: PlayerInterface, card?: CardInterface) : boolean =>  {\n        // Logic to play a card from the player's hand.\n        const index = card === undefined ? 0 : player.hand.findIndex((item) => item.id === card.id);\n        card = player.hand[index];\n        // check if this card is valid\n        if (isValidMove(card)) {\n            player.currentPlayedCard = card;\n            player.playedCards.push(card);\n            player.hand.splice(index, 1);\n            setCardsPlayedThisRound(prevCards => [card, ...prevCards]);\n            // addLog(`Round ${roundCount+1}: ` + `${player.name} played ${card.rank} of ${card.suit}.`);\n            return true;\n        } else {\n            addLog(`Round ${roundCount+1}: Invalid move by ${player.name}.`);\n            return false;\n        }\n    }\n    \n    // Add declarations to logs\n    const addDeclarationsLog = (name: string | undefined, declarations) => {\n        for(const card of declarations[\"open_declarations\"]) {\n            if (card.id == PIG.id) {\n                addLog(`${name} openly declared Pig!`);\n            }\n            if (card.id == SHEEP.id) {\n                addLog(`${name} openly declared Sheep!`);\n            }\n            if (card.id == BLOOD.id) {\n                addLog(`${name} openly declared Blood!`);\n            }\n            if (card.id == DOUBLER.id) {\n                addLog(`${name} openly declared Doubler!`);\n            }\n        }\n        if (name == 'You') {\n            for(const card of declarations[\"closed_declarations\"]) {\n                if (card.id == PIG.id) {\n                    addLog(`${name} secretly declared Pig!`);\n                }\n                if (card.id == SHEEP.id) {\n                    addLog(`${name} secretly declared Sheep!`);\n                }\n                if (card.id == BLOOD.id) {\n                    addLog(`${name} secretly declared Blood!`);\n                }\n                if (card.id == DOUBLER.id) {\n                    addLog(`${name} secretly declared Doubler!`);\n                }\n            }\n        } else {\n            if (declarations[\"closed_declarations\"].length > 0) {\n                addLog(`${name} secretly declared ${declarations[\"closed_declarations\"].length} card(s)!`);\n            }\n        }\n    }\n\n    const handleNextPlayer = () => {\n        // Logic to move to the next player, for example, using a round-robin approach.\n        if (online) {\n            axios.post(API_URL + '/next_player', {'id' : gameId}).then((response) => {\n                const data = response.data;\n                const move = data.move;\n                // if (isDeclarationPhase) {\n                //     // addDeclarationsLog(players[currentPlayerIndex].name, move)\n                // } else {\n                //     // addLog(`Round ${roundCount+1}: ` + `${players[currentPlayerIndex].name} played ${move.rank} of ${move.suit}.`);\n                // }\n                fetchGameStates(gameId);\n                // setCurrentPlayerIndex((currentPlayerIndex + 1) % players.length);\n            }).catch((error) => {\n                console.error('Error fetching next player: ', error);\n            });\n        } else if (playACard(players[currentPlayerIndex])) {\n            setCurrentPlayerIndex((currentPlayerIndex + 1) % players.length);\n        }\n    };\n\n    // Play selected card\n    const handlePlaySelectedCard = () => {\n        // Logic to play the selected card. You can implement this as per the game rules.\n        if (selectedCard === null) {\n            console.warn('No card selected to play');\n            return;\n        }\n        const currentPlayedCard = selectedCard;\n        setSelectedCard(null);\n\n        if ( online) {\n            const requestData = {\n                'id' : gameId,\n                'suit' : currentPlayedCard.suit,\n                'rank' : currentPlayedCard.rank,\n            }\n            axios.post(API_URL + '/play_card', requestData).then((response) => {\n                // const data = response.data;\n                const statusCode = response.status;\n                if (statusCode === 400) {\n                    addLog(\"Invalid move by you. Please try again.\");\n                    return;\n                }\n                // addLog(`Round ${roundCount+1}: ` + `you played ${currentPlayedCard.rank} of ${currentPlayedCard.suit}.`);\n                fetchGameStates(gameId);\n                // setCurrentPlayerIndex((currentPlayerIndex + 1) % players.length);\n            }).catch((error) => {\n                if (error.status === 400 ) {\n                    addLog(\"Invalid move by you. Please try again.\");\n                    return;\n                }\n                console.error('Error fetching playing card: ', error);\n            });\n        } else if ( playACard(players[0], currentPlayedCard) ) {\n            setCurrentPlayerIndex((currentPlayerIndex + 1) % players.length);\n        }\n    };\n\n    const endOneRound = async () => {\n        try {\n            // Figure out the largest of this round based on the played cards\n            let largestIndex;\n            if (online) {\n                const response = await axios.post(API_URL + '/next_round', { 'id': gameId });\n                const data = response.data;\n                largestIndex = data.largestIndex;\n    \n                // addLog(`Round ${roundCount + 1}: ` + `${players[largestIndex].name} was largest.`);\n                await fetchGameStates(gameId); // Ensure the game state is fetched before proceeding\n            } else {\n                largestIndex = Math.floor(Math.random() * 4); // Randomly choose the largest player offline\n                // Update the round count\n                setRoundCount((prevCount) => prevCount + 1);\n            }\n\n            // Process collected cards for the largest player\n            for (let i = 0; i < players.length; i++) {\n                players[largestIndex].collectedCards.push(players[i].currentPlayedCard);\n                players[i].currentPlayedCard = null;\n            }\n    \n            // Decide the next step based on the round count\n            if (roundCount < maxRounds) { // Use `roundCount + 1` because `setRoundCount` is asynchronous\n                setCardsPlayedThisRound([]);\n                setFirstPlayerIndex(largestIndex);\n                setCurrentPlayerIndex(largestIndex);\n                // console.log(`Round ${roundCount + 1} ended.`);\n            } else {\n                setFirstPlayerIndex(-1);\n                setCurrentPlayerIndex(-1);\n            }\n        } catch (error) {\n            console.error('Error in endOneRound: ', error);\n        }\n    };\n    \n    const handleDeclarations = () => {\n        const requestData = convertToDeclarationRequest(); // request\n        // console.log(requestData);\n        axios.post(API_URL + '/make_declarations', requestData).then((response) => {\n            // const data = response.data;\n            const statusCode = response.status;\n            addDeclarationsLog(\"You\", requestData)\n            if (statusCode === 400) {\n                addLog(\"Invalid declaration by you. Please try again.\");\n                return;\n            }\n            // addLog(`Round ${roundCount+1}: ` + `you played ${currentPlayedCard.rank} of ${currentPlayedCard.suit}.`);\n            fetchGameStates(gameId);\n            // setCurrentPlayerIndex((currentPlayerIndex + 1) % players.length);\n        }).catch((error) => {\n            if (error.status === 400 ) {\n                addLog(\"Invalid move by you. Please try again.\");\n                return;\n            }\n            console.error('Error fetching playing card: ', error);\n        });\n    }\n    \n    const startGame = () => {\n        axios.post(API_URL + '/start_game', {\"ai\": ai, \"auto\": gameMode != 'full', \"declaration\": enable_declarations})\n            .then(response => {\n                // console.log(response.data);\n                fetchGameStates(response.data.id);\n                setDeclarations({\n                    \"pig\" : 'no',\n                    'sheep': 'no',\n                    \"doubler\": 'no',\n                    \"blood\": 'no'\n                })\n            })\n            .catch(error => {\n                console.error(\"There was an error starting the game!\", error);\n            });\n    }\n\n    const endEpisode = () => {\n        // console.log('Episode ended. New Game started.');\n        startGame();\n    }\n\n    const fetchGameStates = async (id: String | null) => {\n        // if (loading) {\n        //     return; // Return early if already loading\n        // }\n        try {\n            setLoading(true); // Start loading\n            const response = await axios.post(API_URL + '/get_game_state', {'id' : id});\n            const game_state = response.data.game_state;\n            setPlayers(game_state.players); // Update state with player data\n            setFirstPlayerIndex(game_state.firstPlayerIndex); // Update state with the index of the first player\n            setRoundCount(game_state.roundCount); // Update state with the current round count\n            setCurrentPlayerIndex(game_state.currentPlayerIndex); // Update state with the index of the current player\n            setCardsPlayedThisRound(game_state.cardsPlayedThisRound); // Update state with the cards played this round\n            setDeclarationPhase(game_state.isDeclarationPhase); // Set the declaration\n            setGameId(id);\n            setFirstPlayerIndices(game_state.firstPlayerIndices);\n            // setHistory(game_state.history);\n            setHistory([...game_state.history]); \n            setReadyToLog(true);\n        } catch (err) {\n            console.error(\"Failed to fetch game states:\", err);\n            setError(\"Failed to load player data.\");\n        } finally {\n            setLoading(false); \n            setStarted(true); // Game started\n            // fetchLogs();\n        }\n    };\n\n    if (online) {\n        useEffect(() => {\n            startGame();\n        }, []); \n    }\n\n    let isEndOneRound = false; \n    // Check if every player has played some card\n    if (players.length > 0) {\n        isEndOneRound = players[0].currentPlayedCard != null &&\n        players[1].currentPlayedCard != null &&\n        players[2].currentPlayedCard != null &&\n        players[3].currentPlayedCard != null;\n    } \n    // const isEndOneRound = false;\n    const isEndEpisode = (roundCount === maxRounds && !isEndOneRound);\n    const isYourTurn = (currentPlayerIndex === 0); // Assuming player 0 is at the bottom\n    if (isEndOneRound && currentPlayerIndex != -1) {\n        setCurrentPlayerIndex(-1);\n        // console.log('End of one round');\n    }\n\n    // const isFetching = useRef(false);\n\n    useEffect(() => {\n        if (readyToLog) {\n            fetchLogs();\n            setReadyToLog(false);\n        }\n    }, [readyToLog]); \n\n    // Update esimated action value\n    useEffect(() => {\n        if (selectedCard == null) {\n            setActionValue(null)\n        } else {\n            // Request estimated action value\n            const requestData = {\n                'id' : gameId,\n                'suit' : selectedCard.suit,\n                'rank' : selectedCard.rank,\n            }\n            axios.post(API_URL + '/evaluate', requestData).then((response) => {\n                const statusCode = response.status;\n                if (statusCode === 400) {\n                    // addLog(\"Invalid move by you. Please try again.\");\n                    return;\n                }\n                const data = response.data;\n                const evaluation = data.evaluation;\n                setActionValue(evaluation);\n                // addLog(`Round ${roundCount+1}: ` + `you played ${currentPlayedCard.rank} of ${currentPlayedCard.suit}.`);\n                // fetchGameStates(gameId);\n                // setCurrentPlayerIndex((currentPlayerIndex + 1) % players.length);\n            }).catch((error) => {\n                // if (error.status === 400 ) {\n                //     addLog(\"Invalid move by you. Please try again.\");\n                //     return;\n                // }\n                // console.error('Error fetching playing card: ', error);\n            });            \n        }\n    }, [selectedCard]);\n    \n\n    // Add hotkey for the center button\n    useEffect(() => {\n        const handleKeyPress = (event: KeyboardEvent) => {\n            if (event.key.toLowerCase() === 'n') {\n                handleNextTurn(); // Trigger the button action when 'N' is pressed\n            }\n        };\n\n        window.addEventListener('keydown', handleKeyPress);\n        return () => {\n            window.removeEventListener('keydown', handleKeyPress);\n        };\n    }, [players, selectedCard, currentPlayerIndex]);\n\n    if (!started) {\n        return (\n            <Text>Loading Game...</Text>\n        );\n    }\n    return (\n    <View style={styles.tableContainer}>\n        {/* Top Player */}\n        <View style={[styles.playerContainer, styles.topPlayer]}>\n            <Hand hand={players[2].hand} rotation={0} visible={false} />\n            <View style={[styles.avatarNameContainer, \n            currentPlayerIndex===2 && styles.currentPlayerWrapper, { transform: [{ rotate: '180deg' }, \n                ] }]}>\n            <Image source={players[2].avatar ? players[2].avatar : defaultAvatars[2]} style={styles.avatar} />\n            <Text style={styles.playerName}>{players[2].name}</Text>\n            <Text style={styles.playerName}>Score : {players[2].score}</Text>\n            <Button\n                title={bottonTitle}\n                onPress={() => handleShowCollectedCards(players[2])}\n            />\n            </View>\n        </View>\n        {/* Played card of Top Player */}\n        <View style={[styles.playedCardContainer, { top: 180 }]}>\n            {players[2].currentPlayedCard != null && (\n            <Card card={players[2].currentPlayedCard} rotation={180} />\n        )}\n        </View>\n        {/* Left Player */}\n        <View style={[styles.playerContainer, styles.leftPlayer]}>\n            <View style={[styles.avatarNameContainer,\n            currentPlayerIndex===3 && styles.currentPlayerWrapper]}>\n                <Image source={players[3].avatar ? players[3].avatar : defaultAvatars[3]} style={styles.avatar} />\n                <Text style={styles.playerName}>{players[3].name}</Text>\n                <Text style={styles.playerName}>Score : {players[3].score}</Text>\n            </View>\n            <Button\n            title={bottonTitle}\n            onPress={() => handleShowCollectedCards(players[3])}\n            />\n            <Hand hand={players[3].hand} rotation={0} visible={false} />\n        </View>\n        {/* Played card of Left Player */}\n        <View style={[styles.playedCardContainer, { left: 450 }]}>\n            {players[3].currentPlayedCard != null && (\n            <Card card={players[3].currentPlayedCard} rotation={180} />\n        )}\n        </View>\n        {/* Right Player */}\n        <View style={[styles.playerContainer, styles.rightPlayer]}>\n            <View style={[styles.avatarNameContainer, \n            currentPlayerIndex===1 && styles.currentPlayerWrapper]}>\n                <Image source={players[1].avatar ? players[1].avatar : defaultAvatars[1]} style={styles.avatar} />\n                <Text style={styles.playerName}>{players[1].name}</Text>\n                <Text style={styles.playerName}>Score : {players[1].score}</Text>\n            </View>\n            <Button\n            title={bottonTitle}\n            onPress={() => handleShowCollectedCards(players[1])}\n            />\n            <Hand hand={players[1].hand} rotation={0} visible={false} />\n        </View>\n\n        {/* Played card of Right Player */}\n        <View style={[styles.playedCardContainer, { right: 450 }]}>\n            {players[1].currentPlayedCard != null && (\n            <Card card={players[1].currentPlayedCard} rotation={180} />\n        )}\n        </View>\n        {/* Bottom Player */}\n        <View style={[styles.playerContainer, styles.bottomPlayer]}>\n            <Hand hand={players[0].hand} rotation={0} visible={true} \n                selectable={isYourTurn && !isDeclarationPhase}\n                selectedCard={isYourTurn ? selectedCard : null}\n                setSelectedCard={setSelectedCard}/>\n            <View style={[styles.avatarNameContainer, \n                currentPlayerIndex===0 && styles.currentPlayerWrapper,]} >\n                \n                <Image source={players[0].avatar ? players[0].avatar : defaultAvatars[0]} style={styles.avatar} />\n                <Text style={styles.playerName}>{players[0].name}</Text>\n                <Text style={styles.playerName}>Score : {players[0].score}</Text>\n                <Button\n                    title={bottonTitle}\n                    onPress={() => handleShowCollectedCards(players[0])}\n                />\n            </View>\n        </View>\n        {/* Played card of Bottom Player */}\n        <View style={[styles.playedCardContainer, { bottom: 180 }]}>\n            {players[0].currentPlayedCard != null && (\n            <Card card={players[0].currentPlayedCard} rotation={180} />\n        )}\n\n        {/* Modal for Collected Cards */}\n        </View>\n        {selectedPlayer && (\n            <Modal\n            visible={true}\n            animationType=\"none\"\n            transparent={true}\n            onRequestClose={handleCloseModal}\n            >\n            <View style={styles.modalContainer}>\n                <Text style={styles.modalTitle}>\n                {selectedPlayer.name}'s Cards & Declaration\n                </Text>\n                {/* Collected Cards */}\n                <Text style={styles.sectionTitle}>Collected Cards:</Text>\n                <FlatList\n                data={selectedPlayer.collectedCards}\n                keyExtractor={(item) => item.id}\n                renderItem={({ item }) => (\n                    <Card card={item} />\n                )}\n                horizontal={true}\n                contentContainerStyle={styles.cardsContainer}\n                />\n                {/* Played Cards */}\n                <Text style={styles.sectionTitle}>Played Cards:</Text>\n                <FlatList\n                data={selectedPlayer.playedCards}\n                keyExtractor={(item) => item.id}\n                renderItem={({ item }) => (\n                    <Card card={item} />\n                )}\n                horizontal={true}\n                contentContainerStyle={styles.cardsContainer}\n                />\n\n                {/* Declared Cards */}\n                <Text style={styles.sectionTitle}>Close Declared Cards:</Text>\n                <FlatList\n                data={selectedPlayer.closedDeclaredCards}\n                keyExtractor={(item) => item.id}\n                renderItem={({ item }) => (\n                    <Card card={item} visible={item.known}/>\n                )}\n                horizontal={true}\n                contentContainerStyle={styles.cardsContainer}\n                />\n                <Text style={styles.sectionTitle}>Open Declared Cards:</Text>\n                <FlatList\n                data={selectedPlayer.openDeclaredCards}\n                keyExtractor={(item) => item.id}\n                renderItem={({ item }) => (\n                    <Card card={item} />\n                )}\n                horizontal={true}\n                contentContainerStyle={styles.cardsContainer}\n                />\n\n\n                <Button title=\"Close\" onPress={handleCloseModal} />\n            </View>\n            </Modal>\n        )}\n\n        {/* Modal for Full Log */}\n        <Modal\n            visible={isLogExpanded}\n            animationType=\"none\"\n            transparent={true}\n            onRequestClose={toggleLog}\n        >\n            <View style={styles.modalContainer}>\n            <Text style={styles.modalTitle}>Full Log</Text>\n            <FlatList\n                data={logs}\n                keyExtractor={(item, index) => index.toString()}\n                renderItem={({ item }) => <Text style={styles.modalLogText}>{item}</Text>}\n            />\n            <Button title=\"Close\" onPress={toggleLog} />\n            </View>\n        </Modal>\n\n        {/* Conditional Button */}\n            <Text style={styles.playerName}>Estimated Action Value : {actionValue}</Text>\n            {loading?\n             <Text>Loading...</Text> : \n             isEndEpisode? \n                <Button title=\"New Game (n)\" onPress={handleNextTurn} /> : \n            isEndOneRound ? \n                <Button title=\"End this Round (n)\" onPress={handleNextTurn} /> : \n            (isYourTurn ? ( isDeclarationPhase ? \n                <View>\n                    <Declaration \n                        hand={players[0].hand} \n                        declarations={declarations}\n                        setDeclarations={setDeclarations}\n                    />\n                    <Button title=\"Finish Declaration (n)\" onPress={handleNextTurn} />\n                </View> :\n                <Button title=\"Play Selected Card (n)\" onPress={handleNextTurn} /> \n            ):\n                <Button title=\"Next (n)\" onPress={handleNextTurn} />\n            )}\n\n        {/* Log Section */}\n        <View style={styles.logSection}>\n            <Text style={styles.logTitle}>Logs:</Text>\n            <FlatList\n            data={logs}\n            keyExtractor={(item, index) => index.toString()}\n            renderItem={({ item }) => <Text style={styles.logText}>{item}</Text>}\n            />\n            <TouchableOpacity style={styles.expandButton} onPress={toggleLog}>\n                <Text style={styles.expandButtonText}>Expand</Text>\n            </TouchableOpacity>\n        </View>\n\n    </View>\n        \n    );\n};\n\nconst styles = StyleSheet.create({\n  tableContainer: {\n    flex: 1,\n    justifyContent: 'center',\n    alignItems: 'center',\n    width: '100%',\n  },\n  playerContainer: {\n    position: 'absolute',\n    alignItems: 'center',\n  },\n  topPlayer: {\n    top: 20,\n    flexDirection: 'row',\n    transform: [{ rotate: '180deg' }],\n  },\n  bottomPlayer: {\n    bottom: 20,\n    flexDirection: 'row',\n    alignItems: 'center',\n  },\n  leftPlayer: {\n    left: 20,\n    justifyContent: 'center',\n    transform: [{ rotate: '90deg' }],\n  },\n  rightPlayer: {\n    right: 20,\n    justifyContent: 'center',\n    transform: [{ rotate: '-90deg' }],\n  },\n  avatar: {\n    width: 50,\n    height: 50,\n    borderRadius: 25,\n    marginBottom: 5,\n  },\n  playerName: {\n    fontSize: 16,\n    fontWeight: 'bold',\n    color: '#222222',\n    marginBottom: 5,\n  },\n  avatarNameContainer: {\n    marginLeft: 10,\n    alignItems: 'center',\n  },\n  currentPlayerWrapper: {\n    borderWidth: 5,\n    borderColor: '#FFD700', \n    borderRadius: -5,\n  },\n  modalContainer: {\n    flex: 1,\n    justifyContent: 'center',\n    backgroundColor: 'rgba(0, 0, 0, 0.8)',\n    padding: 20,\n  },\n  modalTitle: {\n    fontSize: 18,\n    fontWeight: 'bold',\n    color: '#fff',\n    textAlign: 'center',\n    marginBottom: 10,\n  },\n  cardsContainer: {\n    flexDirection: 'row',\n    justifyContent: 'center',\n    marginBottom: 2,\n  },\n  sectionTitle: {\n    fontSize: 16,\n    fontWeight: 'bold',\n    color: '#FFD700',\n  },\n  playedCardContainer: {\n    position: 'absolute',\n    zIndex: 2,\n  },\n  logSection: {\n    position: 'absolute',\n    bottom: 0,\n    left: 0,\n    width: '23%', \n    maxHeight: '14%', \n    backgroundColor: '#222',\n    padding: 10,\n    borderTopRightRadius: 10,\n    borderBottomRightRadius: 0,\n    borderTopLeftRadius: 0,\n    borderBottomLeftRadius: 10,\n    overflow: 'hidden',\n  },\n  logTitle: {\n    color: '#fff',\n    fontSize: 16,\n    fontWeight: 'bold',\n    marginBottom: 5,\n  },\n  logText: {\n    color: '#ccc',\n    fontSize: 14,\n  },\n  modalLogText: {\n    color: '#fff',\n    fontSize: 14,\n    marginBottom: 5,\n  },\n  expandButton: {\n    marginTop: 10,\n    padding: 5,\n    backgroundColor: '#444',\n    alignItems: 'center',\n    borderRadius: 5,\n  },\n  expandButtonText: {\n    color: '#fff',\n    fontSize: 14,\n  },\n});\n  \n\nexport default GameTable;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}